        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:8
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
        -:    8:int compare(const void* a, const void* b) {
     4098:    9:  if (*(int*)a > *(int*)b)
      536:   10:    return 1;
     3562:   11:  if (*(int*)a < *(int*)b)
      290:   12:    return -1;
     3272:   13:  return 0;
     4098:   14:}
        -:   15:
        -:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    #####:   18:  return g;
        -:   19:}
        -:   20:
        -:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
        -:   35:}
        -:   36:
        -:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed, struct gameState *state) {
        -:   38:
        -:   39:  int i;
        -:   40:  int j;
        -:   41:  int it;
        -:   42:  //set up random number generator
        1:   43:  SelectStream(1);
        1:   44:  PutSeed((long)randomSeed);
        -:   45:
        -:   46:  //check number of players
        2:   47:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
        -:   48:    {
    #####:   49:      return -1;
        -:   50:    }
        -:   51:
        -:   52:  //set number of players
        1:   53:  state->numPlayers = numPlayers;
        -:   54:
        -:   55:  //check selected kingdom cards are different
       22:   56:  for (i = 0; i < 10; i++) {
      220:   57:    for (j = 0; j < 10; j++) {
      190:   58:      if (j != i && kingdomCards[j] == kingdomCards[i]) {
    #####:   59:        return -1;
        -:   60:      }
      100:   61:    }
       10:   62:  }
        -:   63:
        -:   64:
        -:   65:  //initialize supply
        -:   66:  ///////////////////////////////
        -:   67:
        -:   68:  //set number of Curse cards
        1:   69:  if (numPlayers == 2)
        -:   70:    {
        1:   71:      state->supplyCount[curse] = 10;
        1:   72:    }
    #####:   73:  else if (numPlayers == 3)
        -:   74:    {
    #####:   75:      state->supplyCount[curse] = 20;
    #####:   76:    }
        -:   77:  else
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 30;
        -:   80:    }
        -:   81:
        -:   82:  //set number of Victory cards
        1:   83:  if (numPlayers == 2)
        -:   84:    {
        1:   85:      state->supplyCount[estate] = 8;
        1:   86:      state->supplyCount[duchy] = 8;
        1:   87:      state->supplyCount[province] = 8;
        1:   88:    }
        -:   89:  else
        -:   90:    {
    #####:   91:      state->supplyCount[estate] = 12;
    #####:   92:      state->supplyCount[duchy] = 12;
    #####:   93:      state->supplyCount[province] = 12;
        -:   94:    }
        -:   95:
        -:   96:  //set number of Treasure cards
        1:   97:  state->supplyCount[copper] = 60 - (7 * numPlayers);
        1:   98:  state->supplyCount[silver] = 40;
        1:   99:  state->supplyCount[gold] = 30;
        -:  100:
        -:  101:  //set number of Kingdom cards
       42:  102:  for (i = adventurer; i <= treasure_map; i++)  {     	//loop all cards
      330:  103:    for (j = 0; j < 10; j++) {           		//loop chosen cards
      155:  104:  	  if (kingdomCards[j] == i) {
        -:  105:	      //check if card is a 'Victory' Kingdom card
       20:  106:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens) {
        1:  107:  		    if (numPlayers == 2){
        1:  108:  		      state->supplyCount[i] = 8;
        1:  109:  		    }
        -:  110:  		    else{
    #####:  111:            state->supplyCount[i] = 12;
        -:  112:          }
        1:  113:  		  }
        -:  114:  	    else {
        9:  115:  		    state->supplyCount[i] = 10;
        -:  116:  		  }
       10:  117:  	    break;
        -:  118:  	  }
        -:  119:  	  else {    //card is not in the set choosen for the game
      145:  120:  	      state->supplyCount[i] = -1;
        -:  121:  	  }
      145:  122:  	}
       20:  123:  }
        -:  124:
        -:  125:  ////////////////////////
        -:  126:  //supply intilization complete
        -:  127:
        -:  128:  //set player decks
        6:  129:  for (i = 0; i < numPlayers; i++) {
        2:  130:    state->deckCount[i] = 0;
       16:  131:    for (j = 0; j < 3; j++) {
        6:  132:      state->deck[i][j] = estate;
        6:  133:      state->deckCount[i]++;
        6:  134:    }
       32:  135:    for (j = 3; j < 10; j++) {
       14:  136:      state->deck[i][j] = copper;
       14:  137:      state->deckCount[i]++;
       14:  138:    }
        2:  139:  }
        -:  140:
        -:  141:  //shuffle player decks
        6:  142:  for (i = 0; i < numPlayers; i++) {
        2:  143:    if ( shuffle(i, state) < 0 ) {
    #####:  144:	     return -1;
        -:  145:    }
        2:  146:  }
        -:  147:
        -:  148:  //draw player hands
        6:  149:  for (i = 0; i < numPlayers; i++)
        -:  150:    {
        -:  151:      //initialize hand size to zero
        2:  152:      state->handCount[i] = 0;
        2:  153:      state->discardCount[i] = 0;
        -:  154:      //draw 5 cards
        -:  155:      // for (j = 0; j < 5; j++)
        -:  156:      //	{
        -:  157:      //	  drawCard(i, state);
        -:  158:      //	}
        2:  159:    }
        -:  160:
        -:  161:  //set embargo tokens to 0 for all supply piles
       56:  162:  for (i = 0; i <= treasure_map; i++)
        -:  163:    {
       27:  164:      state->embargoTokens[i] = 0;
       27:  165:    }
        -:  166:
        -:  167:  //initialize first player's turn
        1:  168:  state->outpostPlayed = 0;
        1:  169:  state->phase = 0;
        1:  170:  state->numActions = 1;
        1:  171:  state->numBuys = 1;
        1:  172:  state->playedCardCount = 0;
        1:  173:  state->whoseTurn = 0;
        1:  174:  state->handCount[state->whoseTurn] = 0;
        -:  175:  //int it; move to top
        -:  176:
        -:  177:  //Moved draw cards to here, only drawing at the start of a turn
       12:  178:  for (it = 0; it < 5; it++){
        5:  179:    drawCard(state->whoseTurn, state);
        5:  180:  }
        -:  181:
        1:  182:  updateCoins(state->whoseTurn, state, 0);
        -:  183:
        1:  184:  return 0;
        1:  185:}
        -:  186:
        -:  187:int shuffle(int player, struct gameState *state) {
        -:  188:
        -:  189:  int newDeck[MAX_DECK];
      110:  190:  int newDeckPos = 0;
        -:  191:  int card;
        -:  192:  int i;
        -:  193:
      110:  194:  if (state->deckCount[player] < 1)
       87:  195:    return -1;
       23:  196:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  197:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  198:
     3828:  199:  while (state->deckCount[player] > 0) {
     1891:  200:    card = floor(Random() * state->deckCount[player]);
     1891:  201:    newDeck[newDeckPos] = state->deck[player][card];
     1891:  202:    newDeckPos++;
   395866:  203:    for (i = card; i < state->deckCount[player]-1; i++) {
   196042:  204:      state->deck[player][i] = state->deck[player][i+1];
   196042:  205:    }
     1891:  206:    state->deckCount[player]--;
        -:  207:  }
     3828:  208:  for (i = 0; i < newDeckPos; i++) {
     1891:  209:    state->deck[player][i] = newDeck[i];
     1891:  210:    state->deckCount[player]++;
     1891:  211:  }
        -:  212:
       23:  213:  return 0;
      110:  214:}
        -:  215:
        -:  216:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) {
        -:  217:  int card;
    #####:  218:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  219:
        -:  220:  //check if it is the right phase
    #####:  221:  if (state->phase != 0)
        -:  222:    {
    #####:  223:      return -1;
        -:  224:    }
        -:  225:
        -:  226:  //check if player has enough actions
    #####:  227:  if ( state->numActions < 1 )
        -:  228:    {
    #####:  229:      return -1;
        -:  230:    }
        -:  231:
        -:  232:  //get card played
    #####:  233:  card = handCard(handPos, state);
        -:  234:
        -:  235:  //check if selected card is an action
    #####:  236:  if ( card < adventurer || card > treasure_map )
        -:  237:    {
    #####:  238:      return -1;
        -:  239:    }
        -:  240:
        -:  241:  //play card
    #####:  242:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
        -:  243:    {
    #####:  244:      return -1;
        -:  245:    }
        -:  246:
        -:  247:  //reduce number of actions
    #####:  248:  state->numActions--;
        -:  249:
        -:  250:  //update coins (Treasure cards may be added with card draws)
    #####:  251:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  252:
    #####:  253:  return 0;
    #####:  254:}
        -:  255:
        -:  256:int buyCard(int supplyPos, struct gameState *state) {
        -:  257:  int who;
        -:  258:  if (DEBUG){
        -:  259:    printf("Entering buyCard...\n");
        -:  260:  }
        -:  261:
        -:  262:  // I don't know what to do about the phase thing.
        -:  263:
    #####:  264:  who = state->whoseTurn;
        -:  265:
    #####:  266:  if (state->numBuys < 1){
        -:  267:    if (DEBUG)
        -:  268:      printf("You do not have any buys left\n");
    #####:  269:    return -1;
        -:  270:  }
    #####:  271:  else if (supplyCount(supplyPos, state) <1){
        -:  272:    if (DEBUG)
        -:  273:      printf("There are not any of that type of card left\n");
    #####:  274:    return -1;
        -:  275:  }
    #####:  276:  else if (state->coins < getCost(supplyPos)){
        -:  277:    if (DEBUG)
        -:  278:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  279:    return -1;
        -:  280:  }
        -:  281:  else {
    #####:  282:    state->phase=1;   //Prob shouldn't be here???/
        -:  283:
        -:  284:    //state->supplyCount[supplyPos]--;
    #####:  285:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  286:
    #####:  287:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  288:    state->numBuys--;
        -:  289:    if (DEBUG)
        -:  290:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  291:  }
        -:  292:
        -:  293:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  294:  //state->discardCount[who]++;
        -:  295:
    #####:  296:  return 0;
    #####:  297:}
        -:  298:
        -:  299:int numHandCards(struct gameState *state) {
    #####:  300:  return state->handCount[ whoseTurn(state) ];
        -:  301:}
        -:  302:
        -:  303:int handCard(int handPos, struct gameState *state) {
    #####:  304:  int currentPlayer = whoseTurn(state);
    #####:  305:  return state->hand[currentPlayer][handPos];
        -:  306:}
        -:  307:
        -:  308:int supplyCount(int card, struct gameState *state) {
        6:  309:  return state->supplyCount[card];
        -:  310:}
        -:  311:
        -:  312:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  313:  int i;
    #####:  314:  int count = 0;
        -:  315:
    #####:  316:  for (i = 0; i < state->deckCount[player]; i++)
        -:  317:    {
    #####:  318:      if (state->deck[player][i] == card) count++;
    #####:  319:    }
        -:  320:
    #####:  321:  for (i = 0; i < state->handCount[player]; i++)
        -:  322:    {
    #####:  323:      if (state->hand[player][i] == card) count++;
    #####:  324:    }
        -:  325:
    #####:  326:  for (i = 0; i < state->discardCount[player]; i++)
        -:  327:    {
    #####:  328:      if (state->discard[player][i] == card) count++;
    #####:  329:    }
        -:  330:
    #####:  331:  return count;
        -:  332:}
        -:  333:
        -:  334:int whoseTurn(struct gameState *state) {
       34:  335:  return state->whoseTurn;
        -:  336:}
        -:  337:
        -:  338:int endTurn(struct gameState *state) {
        -:  339:  int k;
        -:  340:  int i;
    #####:  341:  int currentPlayer = whoseTurn(state);
        -:  342:
        -:  343:  //Discard hand
    #####:  344:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    #####:  345:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  346:    state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  347:  }
    #####:  348:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  349:
        -:  350:  //Code for determining the player
    #####:  351:  if (currentPlayer < (state->numPlayers - 1)){
    #####:  352:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  353:  }
        -:  354:  else{
    #####:  355:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
        -:  356:  }
        -:  357:
    #####:  358:  state->outpostPlayed = 0;
    #####:  359:  state->phase = 0;
    #####:  360:  state->numActions = 1;
    #####:  361:  state->coins = 0;
    #####:  362:  state->numBuys = 1;
    #####:  363:  state->playedCardCount = 0;
    #####:  364:  state->handCount[state->whoseTurn] = 0;
        -:  365:
        -:  366:  //int k; move to top
        -:  367:  //Next player draws hand
    #####:  368:  for (k = 0; k < 5; k++){
    #####:  369:    drawCard(state->whoseTurn, state);//Draw a card
    #####:  370:  }
        -:  371:
        -:  372:  //Update money
    #####:  373:  updateCoins(state->whoseTurn, state , 0);
        -:  374:
    #####:  375:  return 0;
        -:  376:}
        -:  377:
        -:  378:int isGameOver(struct gameState *state) {
        -:  379:  int i;
        -:  380:  int j;
        -:  381:
        -:  382:  //if stack of Province cards is empty, the game ends
        7:  383:  if (state->supplyCount[province] == 0) {
        1:  384:    return 1;
        -:  385:  }
        -:  386:
        -:  387:  //if three supply pile are at 0, the game ends
        6:  388:  j = 0;
      312:  389:  for (i = 0; i < 25; i++)
        -:  390:    {
      150:  391:      if (state->supplyCount[i] == 0)
        -:  392:	{
       15:  393:	  j++;
       15:  394:	}
      150:  395:    }
        6:  396:  if ( j >= 3)
        -:  397:    {
        3:  398:      return 1;
        -:  399:    }
        -:  400:
        3:  401:  return 0;
        7:  402:}
        -:  403:
        -:  404:int scoreFor (int player, struct gameState *state) {
        -:  405:
        -:  406:  int i;
    #####:  407:  int score = 0;
        -:  408:  //score from hand
    #####:  409:  for (i = 0; i < state->handCount[player]; i++)
        -:  410:    {
    #####:  411:      if (state->hand[player][i] == curse) { score = score - 1; };
    #####:  412:      if (state->hand[player][i] == estate) { score = score + 1; };
    #####:  413:      if (state->hand[player][i] == duchy) { score = score + 3; };
    #####:  414:      if (state->hand[player][i] == province) { score = score + 6; };
    #####:  415:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    #####:  416:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  417:    }
        -:  418:
        -:  419:  //score from discard
    #####:  420:  for (i = 0; i < state->discardCount[player]; i++)
        -:  421:    {
    #####:  422:      if (state->discard[player][i] == curse) { score = score - 1; };
    #####:  423:      if (state->discard[player][i] == estate) { score = score + 1; };
    #####:  424:      if (state->discard[player][i] == duchy) { score = score + 3; };
    #####:  425:      if (state->discard[player][i] == province) { score = score + 6; };
    #####:  426:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    #####:  427:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  428:    }
        -:  429:
        -:  430:  //score from deck
    #####:  431:  for (i = 0; i < state->discardCount[player]; i++)
        -:  432:    {
    #####:  433:      if (state->deck[player][i] == curse) { score = score - 1; };
    #####:  434:      if (state->deck[player][i] == estate) { score = score + 1; };
    #####:  435:      if (state->deck[player][i] == duchy) { score = score + 3; };
    #####:  436:      if (state->deck[player][i] == province) { score = score + 6; };
    #####:  437:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    #####:  438:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    #####:  439:    }
        -:  440:
    #####:  441:  return score;
        -:  442:}
        -:  443:
        -:  444:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  445:  int i;
        -:  446:  int j;
        -:  447:  int highScore;
        -:  448:  int currentPlayer;
        -:  449:
        -:  450:  //get score for each player
    #####:  451:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  452:    {
        -:  453:      //set unused player scores to -9999
    #####:  454:      if (i >= state->numPlayers)
        -:  455:	{
    #####:  456:	  players[i] = -9999;
    #####:  457:	}
        -:  458:      else
        -:  459:	{
    #####:  460:	  players[i] = scoreFor (i, state);
        -:  461:	}
    #####:  462:    }
        -:  463:
        -:  464:  //find highest score
    #####:  465:  j = 0;
    #####:  466:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  467:    {
    #####:  468:      if (players[i] > players[j])
        -:  469:	{
    #####:  470:	  j = i;
    #####:  471:	}
    #####:  472:    }
    #####:  473:  highScore = players[j];
        -:  474:
        -:  475:  //add 1 to players who had less turns
    #####:  476:  currentPlayer = whoseTurn(state);
    #####:  477:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  478:    {
    #####:  479:      if ( players[i] == highScore && i > currentPlayer )
        -:  480:	{
    #####:  481:	  players[i]++;
    #####:  482:	}
    #####:  483:    }
        -:  484:
        -:  485:  //find new highest score
    #####:  486:  j = 0;
    #####:  487:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  488:    {
    #####:  489:      if ( players[i] > players[j] )
        -:  490:	{
    #####:  491:	  j = i;
    #####:  492:	}
    #####:  493:    }
    #####:  494:  highScore = players[j];
        -:  495:
        -:  496:  //set winners in array to 1 and rest to 0
    #####:  497:  for (i = 0; i < MAX_PLAYERS; i++)
        -:  498:    {
    #####:  499:      if ( players[i] == highScore )
        -:  500:	{
    #####:  501:	  players[i] = 1;
    #####:  502:	}
        -:  503:      else
        -:  504:	{
    #####:  505:	  players[i] = 0;
        -:  506:	}
    #####:  507:    }
        -:  508:
    #####:  509:  return 0;
        -:  510:}
        -:  511:
        -:  512:int drawCard(int player, struct gameState *state) {
        -:  513:  int count;
        -:  514:  int deckCounter;
      146:  515:  if (state->deckCount[player] <= 0){//Deck is empty
        -:  516:
        -:  517:    //Step 1 Shuffle the discard pile back into a deck
        -:  518:    int i;
        -:  519:    //Move discard to deck
      336:  520:    for (i = 0; i < state->discardCount[player];i++){
       94:  521:      state->deck[player][i] = state->discard[player][i];
       94:  522:      state->discard[player][i] = -1;
       94:  523:    }
        -:  524:
       74:  525:    state->deckCount[player] = state->discardCount[player];
       74:  526:    state->discardCount[player] = 0;//Reset discard
        -:  527:
        -:  528:    //Shufffle the deck
       74:  529:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  530:
        -:  531:    if (DEBUG){//Debug statements
        -:  532:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  533:    }
        -:  534:
       74:  535:    state->discardCount[player] = 0;
        -:  536:
        -:  537:    //Step 2 Draw Card
       74:  538:    count = state->handCount[player];//Get current player's hand count
        -:  539:
        -:  540:    if (DEBUG){//Debug statements
        -:  541:      printf("Current hand count: %d\n", count);
        -:  542:    }
        -:  543:
       74:  544:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  545:
       74:  546:    if (deckCounter == 0)
       61:  547:      return -1;
        -:  548:
       13:  549:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
       13:  550:    state->deckCount[player]--;
       13:  551:    state->handCount[player]++;//Increment hand count
       13:  552:  }
        -:  553:
        -:  554:  else{
       72:  555:    int count = state->handCount[player];//Get current hand count for player
        -:  556:    int deckCounter;
        -:  557:    if (DEBUG){//Debug statements
        -:  558:      printf("Current hand count: %d\n", count);
        -:  559:    }
        -:  560:
       72:  561:    deckCounter = state->deckCount[player];//Create holder for the deck count
       72:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       72:  563:    state->deckCount[player]--;
       72:  564:    state->handCount[player]++;//Increment hand count
        -:  565:  }
        -:  566:
       85:  567:  return 0;
      146:  568:}
        -:  569:
        -:  570:int getCost(int cardNumber) {
    #####:  571:  switch( cardNumber )
        -:  572:    {
        -:  573:    case curse:
    #####:  574:      return 0;
        -:  575:    case estate:
    #####:  576:      return 2;
        -:  577:    case duchy:
    #####:  578:      return 5;
        -:  579:    case province:
    #####:  580:      return 8;
        -:  581:    case copper:
    #####:  582:      return 0;
        -:  583:    case silver:
    #####:  584:      return 3;
        -:  585:    case gold:
    #####:  586:      return 6;
        -:  587:    case adventurer:
    #####:  588:      return 6;
        -:  589:    case council_room:
    #####:  590:      return 5;
        -:  591:    case feast:
    #####:  592:      return 4;
        -:  593:    case gardens:
    #####:  594:      return 4;
        -:  595:    case mine:
    #####:  596:      return 5;
        -:  597:    case remodel:
    #####:  598:      return 4;
        -:  599:    case smithy:
    #####:  600:      return 4;
        -:  601:    case village:
    #####:  602:      return 3;
        -:  603:    case baron:
    #####:  604:      return 4;
        -:  605:    case great_hall:
    #####:  606:      return 3;
        -:  607:    case minion:
    #####:  608:      return 5;
        -:  609:    case steward:
    #####:  610:      return 3;
        -:  611:    case tribute:
    #####:  612:      return 5;
        -:  613:    case ambassador:
    #####:  614:      return 3;
        -:  615:    case cutpurse:
    #####:  616:      return 4;
        -:  617:    case embargo:
    #####:  618:      return 2;
        -:  619:    case outpost:
    #####:  620:      return 5;
        -:  621:    case salvager:
    #####:  622:      return 4;
        -:  623:    case sea_hag:
    #####:  624:      return 4;
        -:  625:    case treasure_map:
    #####:  626:      return 4;
        -:  627:    }
    #####:  628:  return -1;
    #####:  629:}
        -:  630:
        -:  631:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus) {
        -:  632:  int i;
        -:  633:  int j;
        -:  634:  int k;
        -:  635:  int x;
        -:  636:  int index;
       13:  637:  int currentPlayer = whoseTurn(state);
       13:  638:  int nextPlayer = currentPlayer + 1;
        -:  639:
       13:  640:  int tributeRevealedCards[2] = {-1, -1};
        -:  641:  int temphand[MAX_HAND];// moved above the if statement
        -:  642:
        -:  643:  // UNUSED VARIABLES
        -:  644:  // int drawntreasure=0;
        -:  645:  // int cardDrawn;
        -:  646:  // int z = 0;// this is the counter for the temp hand
        -:  647:  // UNUSED VARIABLES
        -:  648:
        -:  649:
       13:  650:  if (nextPlayer > (state->numPlayers - 1)){
    #####:  651:    nextPlayer = 0;
    #####:  652:  }
        -:  653:
        -:  654:
        -:  655:  //uses switch to select card and perform actions
       21:  656:  switch( card )
        -:  657:    {
        -:  658:    // Adventerer
        -:  659:    case adventurer:
        3:  660:      playAdventurer(state);
        -:  661:      //Adding line below to run tests
        3:  662:      return 0;
        -:  663:
        -:  664:    case council_room:
    #####:  665:      playCouncilRoom(state, handPos);
        -:  666:
        -:  667:    case feast:
        -:  668:      //gain card with cost up to 5
        -:  669:      //Backup hand
    #####:  670:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  671:        temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  672:        state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  673:      }
        -:  674:      //Backup hand
        -:  675:
        -:  676:      //Update Coins for Buy
    #####:  677:      updateCoins(currentPlayer, state, 5);
    #####:  678:      x = 1;//Condition to loop on
    #####:  679:      while( x == 1) {//Buy one card
    #####:  680:        if (supplyCount(choice1, state) <= 0){
        -:  681:          if (DEBUG) {
        -:  682:            printf("None of that card left, sorry!\n");
        -:  683:          }
        -:  684:          if (DEBUG){
        -:  685:            printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  686:          }
    #####:  687:        }
    #####:  688:        else if (state->coins < getCost(choice1)){
    #####:  689:          printf("That card is too expensive!\n");
        -:  690:          if (DEBUG){
        -:  691:	          printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  692:          }
    #####:  693:        }
        -:  694:	      else{
        -:  695:          if (DEBUG){
        -:  696:            printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  697:          }
    #####:  698:          gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  699:          x = 0;//No more buying cards
        -:  700:          if (DEBUG){
        -:  701:            printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  702:          }
        -:  703:        }
        -:  704:      }
        -:  705:
        -:  706:      //Reset Hand
    #####:  707:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    #####:  708:        state->hand[currentPlayer][i] = temphand[i];
    #####:  709:        temphand[i] = -1;
    #####:  710:      }
        -:  711:      //Reset Hand
        -:  712:
    #####:  713:      return 0;
        -:  714:
        -:  715:    case gardens:
    #####:  716:      return -1;
        -:  717:
        -:  718:    case mine:
    #####:  719:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  720:
    #####:  721:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold) {
    #####:  722:        return -1;
        -:  723:      }
        -:  724:
    #####:  725:      if (choice2 > treasure_map || choice2 < curse) {
    #####:  726:        return -1;
        -:  727:      }
        -:  728:
    #####:  729:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) ) {
    #####:  730:        return -1;
        -:  731:    	}
        -:  732:
    #####:  733:      gainCard(choice2, state, 2, currentPlayer);
        -:  734:
        -:  735:      //discard card from hand
    #####:  736:      discardCard(handPos, currentPlayer, state, 0);
        -:  737:
        -:  738:      //discard trashed card
    #####:  739:      for (i = 0; i < state->handCount[currentPlayer]; i++) {
    #####:  740:	      if (state->hand[currentPlayer][i] == j) {
    #####:  741:          discardCard(i, currentPlayer, state, 0);
    #####:  742:          break;
        -:  743:        }
    #####:  744:      }
        -:  745:
    #####:  746:      return 0;
        -:  747:
        -:  748:    case remodel:
    #####:  749:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  750:
    #####:  751:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) ) {
    #####:  752:	      return -1;
        -:  753:      }
        -:  754:
    #####:  755:      gainCard(choice2, state, 0, currentPlayer);
        -:  756:
        -:  757:      //discard card from hand
    #####:  758:      discardCard(handPos, currentPlayer, state, 0);
        -:  759:
        -:  760:      //discard trashed card
    #####:  761:      for (i = 0; i < state->handCount[currentPlayer]; i++) {
    #####:  762:        if (state->hand[currentPlayer][i] == j) {
    #####:  763:          discardCard(i, currentPlayer, state, 0);
    #####:  764:          break;
        -:  765:        }
    #####:  766:      }
        -:  767:
    #####:  768:      return 0;
        -:  769:
        -:  770:    case smithy:
        5:  771:      playSmithy(state, handPos);
        -:  772:
        -:  773:    case village:
        -:  774:      //+1 Card
        7:  775:      drawCard(currentPlayer, state);
        -:  776:
        -:  777:      //+2 Actions
        7:  778:      state->numActions = state->numActions + 2;
        -:  779:
        -:  780:      //discard played card from hand
        7:  781:      discardCard(handPos, currentPlayer, state, 0);
        7:  782:      return 0;
        -:  783:
        -:  784:    case baron:
    #####:  785:      state->numBuys++;//Increase buys by 1!
    #####:  786:      if (choice1 > 0){//Boolean true or going to discard an estate
    #####:  787:        int p = 0;//Iterator for hand!
    #####:  788:        int card_not_discarded = 1;//Flag for discard set!
    #####:  789:        while(card_not_discarded){
    #####:  790:          if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    #####:  791:            state->coins += 4;//Add 4 coins to the amount of coins
    #####:  792:            state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  793:            state->discardCount[currentPlayer]++;
    #####:  794:            for (;p < state->handCount[currentPlayer]; p++){
    #####:  795:              state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  796:            }
    #####:  797:            state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  798:            state->handCount[currentPlayer]--;
    #####:  799:            card_not_discarded = 0;//Exit the loop
    #####:  800:          }
    #####:  801:          else if (p > state->handCount[currentPlayer]){
        -:  802:            if(DEBUG) {
        -:  803:              printf("No estate cards in your hand, invalid choice\n");
        -:  804:              printf("Must gain an estate if there are any\n");
        -:  805:            }
    #####:  806:      	    if (supplyCount(estate, state) > 0){
    #####:  807:      	      gainCard(estate, state, 0, currentPlayer);
    #####:  808:      	      state->supplyCount[estate]--;//Decrement estates
    #####:  809:      	      if (supplyCount(estate, state) == 0) {
    #####:  810:                isGameOver(state);
    #####:  811:              }
    #####:  812:      	    }
    #####:  813:      	    card_not_discarded = 0;//Exit the loop
    #####:  814:      	  }
        -:  815:          else{
    #####:  816:            p++;//Next card
        -:  817:          }
        -:  818:        }
    #####:  819:      }
        -:  820:      else{
    #####:  821:        if (supplyCount(estate, state) > 0){
    #####:  822:          gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  823:          state->supplyCount[estate]--;//Decrement Estates
    #####:  824:          if (supplyCount(estate, state) == 0){
    #####:  825:            isGameOver(state);
    #####:  826:          }
    #####:  827:        }
        -:  828:      }
    #####:  829:      return 0;
        -:  830:
        -:  831:    case great_hall:
        3:  832:      playGreatHall(state, handPos);
        -:  833:
        -:  834:    case minion:
        -:  835:      //+1 action
        3:  836:      state->numActions++;
        -:  837:
        -:  838:      //discard card from hand
        3:  839:      discardCard(handPos, currentPlayer, state, 0);
        -:  840:
        3:  841:      if (choice1) {		//+2 coins
        3:  842:        state->coins = state->coins + 2;
        3:  843:      }
    #####:  844:      else if (choice2) {
        -:  845:        //discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  846:
        -:  847:        //discard hand
    #####:  848:        while(numHandCards(state) > 0) {
    #####:  849:          discardCard(handPos, currentPlayer, state, 0);
        -:  850:        }
        -:  851:        //draw 4
    #####:  852:        for (i = 0; i < 4; i++) {
    #####:  853:          drawCard(currentPlayer, state);
    #####:  854:        }
        -:  855:
        -:  856:        //other players discard hand and redraw if hand size > 4
    #####:  857:        for (i = 0; i < state->numPlayers; i++) {
    #####:  858:          if (i != currentPlayer) {
    #####:  859:            if ( state->handCount[i] > 4 ) {
        -:  860:              //discard hand
    #####:  861:              while( state->handCount[i] > 0 ) {
    #####:  862:                discardCard(handPos, i, state, 0);
        -:  863:              }
        -:  864:              //draw 4
    #####:  865:              for (j = 0; j < 4; j++)
        -:  866:              {
    #####:  867:                drawCard(i, state);
    #####:  868:              }
    #####:  869:            }
    #####:  870:          }
    #####:  871:        }
    #####:  872:      }
        3:  873:      return 0;
        -:  874:
        -:  875:    case steward:
    #####:  876:      if (choice1 == 1) {
        -:  877:        //+2 cards
    #####:  878:	      drawCard(currentPlayer, state);
    #####:  879:	      drawCard(currentPlayer, state);
    #####:  880:	    }
    #####:  881:      else if (choice1 == 2) {
        -:  882:    	  //+2 coins
    #####:  883:    	  state->coins = state->coins + 2;
    #####:  884:    	}
        -:  885:      else {
        -:  886:    	  //trash 2 cards in hand
    #####:  887:    	  discardCard(choice2, currentPlayer, state, 1);
    #####:  888:    	  discardCard(choice3, currentPlayer, state, 1);
        -:  889:    	}
        -:  890:
        -:  891:      //discard card from hand
    #####:  892:      discardCard(handPos, currentPlayer, state, 0);
    #####:  893:      return 0;
        -:  894:
        -:  895:    case tribute:
    #####:  896:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    #####:  897:        if (state->deckCount[nextPlayer] > 0) {
    #####:  898:          tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  899:          state->deckCount[nextPlayer]--;
    #####:  900:        }
    #####:  901:      	else if (state->discardCount[nextPlayer] > 0){
    #####:  902:      	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  903:      	  state->discardCount[nextPlayer]--;
    #####:  904:      	}
        -:  905:      	else{
        -:  906:      	  //No Card to Reveal
        -:  907:      	  if (DEBUG){
        -:  908:      	    printf("No cards to reveal\n");
        -:  909:      	  }
        -:  910:      	}
    #####:  911:      }
        -:  912:      else{
    #####:  913:        if (state->deckCount[nextPlayer] == 0){
    #####:  914:      	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    #####:  915:      	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  916:      	    state->deckCount[nextPlayer]++;
    #####:  917:      	    state->discard[nextPlayer][i] = -1;
    #####:  918:      	    state->discardCount[nextPlayer]--;
    #####:  919:      	  }
    #####:  920:          shuffle(nextPlayer,state);//Shuffle the deck
    #####:  921:        }
    #####:  922:	      tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  923:	      state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  924:        state->deckCount[nextPlayer]--;
    #####:  925:        tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  926:        state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  927:        state->deckCount[nextPlayer]--;
        -:  928:      }
        -:  929:
    #####:  930:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
    #####:  931:        state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  932:        state->playedCardCount++;
    #####:  933:        tributeRevealedCards[1] = -1;
    #####:  934:      }
    #####:  935:      for (i = 0; i <= 2; i ++){
    #####:  936:        if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    #####:  937:          state->coins += 2;
    #####:  938:        }
    #####:  939:        else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall) {
        -:  940:          //Victory Card Found
    #####:  941:	        drawCard(currentPlayer, state);
    #####:  942:	        drawCard(currentPlayer, state);
    #####:  943:	      }
        -:  944:        else{//Action Card
    #####:  945:          state->numActions = state->numActions + 2;
        -:  946:        }
    #####:  947:      }
    #####:  948:      return 0;
        -:  949:
        -:  950:    case ambassador:
    #####:  951:      j = 0;		//used to check if player has enough cards to discard
        -:  952:
    #####:  953:      if (choice2 > 2 || choice2 < 0) {
    #####:  954:        return -1;
        -:  955:      }
        -:  956:
    #####:  957:      if (choice1 == handPos) {
    #####:  958:        return -1;
        -:  959:      }
        -:  960:
    #####:  961:      for (i = 0; i < state->handCount[currentPlayer]; i++) {
    #####:  962:        if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1) {
    #####:  963:          j++;
    #####:  964:        }
    #####:  965:      }
    #####:  966:      if (j < choice2) {
    #####:  967:        return -1;
        -:  968:      }
        -:  969:
        -:  970:      if (DEBUG) {
        -:  971:        printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  972:      }
        -:  973:
        -:  974:      //increase supply count for choosen card by amount being discarded
    #####:  975:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  976:
        -:  977:      //each other player gains a copy of revealed card
    #####:  978:      for (i = 0; i < state->numPlayers; i++) {
    #####:  979:        if (i != currentPlayer) {
    #####:  980:          gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####:  981:        }
    #####:  982:      }
        -:  983:
        -:  984:      //discard played card from hand
    #####:  985:      discardCard(handPos, currentPlayer, state, 0);
        -:  986:
        -:  987:      //trash copies of cards returned to supply
    #####:  988:      for (j = 0; j < choice2; j++) {
    #####:  989:        for (i = 0; i < state->handCount[currentPlayer]; i++) {
    #####:  990:          if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1]) {
    #####:  991:            discardCard(i, currentPlayer, state, 1);
    #####:  992:            break;
        -:  993:          }
    #####:  994:        }
    #####:  995:      }
        -:  996:
    #####:  997:      return 0;
        -:  998:
        -:  999:    case cutpurse:
    #####: 1000:      updateCoins(currentPlayer, state, 2);
    #####: 1001:      for (i = 0; i < state->numPlayers; i++) {
    #####: 1002:	      if (i != currentPlayer) {
    #####: 1003:          for (j = 0; j < state->handCount[i]; j++) {
    #####: 1004:            if (state->hand[i][j] == copper) {
    #####: 1005:              discardCard(j, i, state, 0);
    #####: 1006:              break;
        -: 1007:            }
    #####: 1008:            if (j == state->handCount[i]) {
    #####: 1009:              for (k = 0; k < state->handCount[i]; k++) {
        -: 1010:                if (DEBUG) {
        -: 1011:                  printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1012:                }
    #####: 1013:              }
    #####: 1014:              break;
        -: 1015:            }
    #####: 1016:          }
    #####: 1017:        }
    #####: 1018:      }
        -: 1019:
        -: 1020:      //discard played card from hand
    #####: 1021:      discardCard(handPos, currentPlayer, state, 0);
        -: 1022:
    #####: 1023:      return 0;
        -: 1024:
        -: 1025:    case embargo:
    #####: 1026:      playEmbargo(state, handPos, choice1);
        -: 1027:
        -: 1028:    case outpost:
        -: 1029:      //set outpost flag
    #####: 1030:      state->outpostPlayed++;
        -: 1031:
        -: 1032:      //discard card
    #####: 1033:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1034:      return 0;
        -: 1035:
        -: 1036:    case salvager:
        -: 1037:      //+1 buy
    #####: 1038:      state->numBuys++;
        -: 1039:
    #####: 1040:      if (choice1) {
        -: 1041:        //gain coins equal to trashed card
    #####: 1042:        state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1043:        //trash card
    #####: 1044:        discardCard(choice1, currentPlayer, state, 1);
    #####: 1045:      }
        -: 1046:
        -: 1047:      //discard card
    #####: 1048:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1049:      return 0;
        -: 1050:
        -: 1051:    case sea_hag:
    #####: 1052:      for (i = 0; i < state->numPlayers; i++){
    #####: 1053:        if (i != currentPlayer){
    #####: 1054:	        state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
    #####: 1055:          state->deckCount[i]--;
    #####: 1056:          state->discardCount[i]++;
    #####: 1057:          state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1058:        }
    #####: 1059:      }
    #####: 1060:      return 0;
        -: 1061:
        -: 1062:    case treasure_map:
        -: 1063:      //search hand for another treasure_map
    #####: 1064:      index = -1;
    #####: 1065:      for (i = 0; i < state->handCount[currentPlayer]; i++) {
    #####: 1066:	      if (state->hand[currentPlayer][i] == treasure_map && i != handPos) {
    #####: 1067:	        index = i;
    #####: 1068:	        break;
        -: 1069:        }
    #####: 1070:      }
    #####: 1071:      if (index > -1) {
        -: 1072:    	  //trash both treasure cards
    #####: 1073:    	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1074:    	  discardCard(index, currentPlayer, state, 1);
        -: 1075:
        -: 1076:        //gain 4 Gold cards
    #####: 1077:	      for (i = 0; i < 4; i++) {
    #####: 1078:	        gainCard(gold, state, 1, currentPlayer);
    #####: 1079:        }
        -: 1080:
        -: 1081:	      //return success
    #####: 1082:	      return 1;
        -: 1083:	    }
        -: 1084:
        -: 1085:      //no second treasure_map found in hand
    #####: 1086:      return -1;
        -: 1087:    }
        -: 1088:
    #####: 1089:    return -1;
       13: 1090:}
        -: 1091:
        -: 1092:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag) {
        -: 1093:
        -: 1094:  //if card is not trashed, added to Played pile
       25: 1095:  if (trashFlag < 1)
        -: 1096:    {
        -: 1097:      //add card to played pile
       25: 1098:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
       25: 1099:      state->playedCardCount++;
       25: 1100:    }
        -: 1101:
        -: 1102:  //set played card to -1
       25: 1103:  state->hand[currentPlayer][handPos] = -1;
        -: 1104:
        -: 1105:  //remove card from player's hand
       25: 1106:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
        -: 1107:    {
        -: 1108:      //reduce number of cards in hand
    #####: 1109:      state->handCount[currentPlayer]--;
    #####: 1110:    }
       25: 1111:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
        -: 1112:    {
        -: 1113:      //reduce number of cards in hand
    #####: 1114:      state->handCount[currentPlayer]--;
    #####: 1115:    }
        -: 1116:  else
        -: 1117:    {
        -: 1118:      //replace discarded card with last card in hand
       25: 1119:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1120:      //set last card to -1
       25: 1121:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1122:      //reduce number of cards in hand
       25: 1123:      state->handCount[currentPlayer]--;
        -: 1124:    }
        -: 1125:
       25: 1126:  return 0;
        -: 1127:}
        -: 1128:
        -: 1129:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player) {
        -: 1130:  //Note: supplyPos is enum of choosen card
        -: 1131:
        -: 1132:  //check if supply pile is empty (0) or card is not used in game (-1)
        6: 1133:  if ( supplyCount(supplyPos, state) < 1 )
        -: 1134:    {
        2: 1135:      return -1;
        -: 1136:    }
        -: 1137:
        -: 1138:  //added card for [whoseTurn] current player:
        -: 1139:  // toFlag = 0 : add to discard
        -: 1140:  // toFlag = 1 : add to deck
        -: 1141:  // toFlag = 2 : add to hand
        -: 1142:
        4: 1143:  if (toFlag == 1)
        -: 1144:    {
        1: 1145:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
        1: 1146:      state->deckCount[player]++;
        1: 1147:    }
        3: 1148:  else if (toFlag == 2)
        -: 1149:    {
        1: 1150:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
        1: 1151:      state->handCount[player]++;
        1: 1152:    }
        -: 1153:  else
        -: 1154:    {
        2: 1155:      state->discard[player][ state->discardCount[player] ] = supplyPos;
        2: 1156:      state->discardCount[player]++;
        -: 1157:    }
        -: 1158:
        -: 1159:  //decrease number in supply pile
        4: 1160:  state->supplyCount[supplyPos]--;
        -: 1161:
        4: 1162:  return 0;
        6: 1163:}
        -: 1164:
        -: 1165:int updateCoins(int player, struct gameState *state, int bonus) {
        -: 1166:  int i;
        -: 1167:
        -: 1168:  //reset coin count
        7: 1169:  state->coins = 0;
        -: 1170:
        -: 1171:  //add coins for each Treasure card in player's hand
     1906: 1172:  for (i = 0; i < state->handCount[player]; i++)
        -: 1173:    {
      946: 1174:      if (state->hand[player][i] == copper)
        -: 1175:	{
        6: 1176:	  state->coins += 1;
        6: 1177:	}
      940: 1178:      else if (state->hand[player][i] == silver)
        -: 1179:	{
       13: 1180:	  state->coins += 2;
       13: 1181:	}
      927: 1182:      else if (state->hand[player][i] == gold)
        -: 1183:	{
       26: 1184:	  state->coins += 3;
       26: 1185:	}
      946: 1186:    }
        -: 1187:
        -: 1188:  //add bonus
        7: 1189:  state->coins += bonus;
        -: 1190:
        7: 1191:  return 0;
        -: 1192:}
        -: 1193:
        -: 1194:int playAdventurer(struct gameState *state) {
        6: 1195:  int currentPlayer = whoseTurn(state);
        -: 1196:
        -: 1197:
        -: 1198:  int temphand[MAX_HAND];// moved above the if statement
        6: 1199:  int drawntreasure=0;
        -: 1200:  int cardDrawn;
        6: 1201:  int z = 0;// this is the counter for the temp hand
        -: 1202:
        -: 1203:
      104: 1204:  while(drawntreasure<2) {
       46: 1205:    if (state->deckCount[currentPlayer] <1){
        -: 1206:      //if the deck is empty we need to shuffle discard and add to deck
       24: 1207:      shuffle(currentPlayer, state);
       24: 1208:    }
        -: 1209:
       46: 1210:    drawCard(currentPlayer, state);
        -: 1211:    // BUG #1 Adding second call to drawCard
       46: 1212:    drawCard(currentPlayer, state);
        -: 1213:    // BUG #1 Adding second call to drawCard
        -: 1214:
        -: 1215:    //top card of hand is most recently drawn card.
       46: 1216:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];
        -: 1217:
        -: 1218:    // BUG #2 Mistaking gold for copper; not counting gold as a treasurecard
      120: 1219:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == copper)
        -: 1220:    // BUG #2 Mistaking gold for copper; not counting gold as a treasurecard
        -: 1221:    //if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
       12: 1222:      drawntreasure++;
        -: 1223:    else{
       34: 1224:      temphand[z]=cardDrawn;
       34: 1225:      state->handCount[currentPlayer]--;
        -: 1226:      //this should just remove the top card (the most recently drawn one).
       34: 1227:      z++;
        -: 1228:    }
        -: 1229:  }
       80: 1230:  while(z-1>=0) {
        -: 1231:    // discard all cards in play that have been drawn
       34: 1232:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z-1];
       34: 1233:    z=z-1;
        -: 1234:  }
        6: 1235:  return 0;
        -: 1236:}
        -: 1237:
        -: 1238:int playSmithy(struct gameState *state, int handPos) {
        -: 1239:  int i;
        9: 1240:  int currentPlayer = whoseTurn(state);
        -: 1241:
        -: 1242:  // BUG #1 The next player is incorrectly calculated with subtraction instead of addition, which will eventually cause an out of bounds error with arrays.
        -: 1243:
        9: 1244:  int nextPlayer = currentPlayer - 1;
        -: 1245:  // int nextPlayer = currentPlayer + 1;
        -: 1246:
        -: 1247:  // BUG #1 The next player is incorrectly calculated with subtraction instead of addition, which will eventually cause an out of bounds error with arrays.
        -: 1248:
        9: 1249:  if (nextPlayer > (state->numPlayers - 1)){
    #####: 1250:    nextPlayer = 0;
    #####: 1251:  }
        -: 1252:
        -: 1253:  //+3 Cards
        -: 1254:  // BUG #2 Off by 1 error when drawing cards.
       90: 1255:  for (i = 0; i <= 3; i++) {
        -: 1256:  // for (i = 0; i < 3; i++) {
        -: 1257:  // BUG #2
       36: 1258:    drawCard(currentPlayer, state);
       36: 1259:  }
        -: 1260:
        -: 1261:  //discard card from hand
        9: 1262:  discardCard(handPos, currentPlayer, state, 0);
        9: 1263:  return 0;
        -: 1264:}
        -: 1265:
        -: 1266:int playCouncilRoom(struct gameState *state, int handPos) {
        -: 1267:  int i;
    #####: 1268:  int currentPlayer = whoseTurn(state);
    #####: 1269:  int nextPlayer = currentPlayer + 1;
        -: 1270:
    #####: 1271:  if (nextPlayer > (state->numPlayers - 1)){
    #####: 1272:    nextPlayer = 0;
    #####: 1273:  }
        -: 1274:
        -: 1275:
        -: 1276:  //+4 Cards
    #####: 1277:  for (i = 0; i < 4; i++) {
    #####: 1278:  	drawCard(currentPlayer, state);
    #####: 1279:  }
        -: 1280:
        -: 1281:  //+1 Buy
    #####: 1282:  state->numBuys++;
        -: 1283:
        -: 1284:  // BUG #1 Removes the code for each other player drawing a card
        -: 1285:  //Each other player draws a card
        -: 1286:  // for (i = 0; i < state->numPlayers; i++) {
        -: 1287:  // 	if ( i != currentPlayer ) {
        -: 1288:  // 		drawCard(i, state);
        -: 1289:  // 	}
        -: 1290:  // }
        -: 1291:  // BUG #1 Removes the code for each other player drawing a card
        -: 1292:
        -: 1293:  //put played card in played card pile
    #####: 1294:  discardCard(handPos, currentPlayer, state, 0);
        -: 1295:
    #####: 1296:  return 0;
        -: 1297:}
        -: 1298:
        -: 1299:int playEmbargo(struct gameState *state, int handPos, int choice1) {
    #####: 1300:  int currentPlayer = whoseTurn(state);
    #####: 1301:  int nextPlayer = currentPlayer + 1;
        -: 1302:
    #####: 1303:  if (nextPlayer > (state->numPlayers - 1)){
    #####: 1304:    nextPlayer = 0;
    #####: 1305:  }
        -: 1306:
        -: 1307:  //+2 Coins
    #####: 1308:  state->coins = state->coins + 2;
        -: 1309:
        -: 1310:  //see if selected pile is in play
        -: 1311:  // BUG #1 If statement uses an assignment (=) instead of the equality (==).
    #####: 1312:  if ( state->supplyCount[choice1] = -1 ) {
        -: 1313:  // if ( state->supplyCount[choice1] == -1 ) {
        -: 1314:  // BUG #1
        -: 1315:
    #####: 1316:    return -1;
        -: 1317:  }
        -: 1318:
        -: 1319:  //add embargo token to selected supply pile
    #####: 1320:  state->embargoTokens[choice1]++;
        -: 1321:
        -: 1322:  //trash card
        -: 1323:  // BUG #2 incorrectly set the trash flag
    #####: 1324:  discardCard(handPos, currentPlayer, state, 0);
        -: 1325:  // discardCard(handPos, currentPlayer, state, 1);
        -: 1326:  // BUG #2
        -: 1327:
    #####: 1328:  return 0;
    #####: 1329:}
        -: 1330:
        -: 1331:int playGreatHall(struct gameState *state, int handPos) {
        6: 1332:  int currentPlayer = whoseTurn(state);
        -: 1333:
        -: 1334:  //+1 Card
        6: 1335:  drawCard(currentPlayer, state);
        -: 1336:  //+1 Actions
        6: 1337:  state->numActions++;
        -: 1338:  //discard card from hand
        6: 1339:  discardCard(handPos, currentPlayer, state, 0);
        6: 1340:  return 0;
        -: 1341:}
        -: 1342:
        -: 1343://end of dominion.c
