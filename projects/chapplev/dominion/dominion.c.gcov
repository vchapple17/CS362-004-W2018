        -:    0:Source:dominion.c
        -:    0:Graph:dominion.gcno
        -:    0:Data:dominion.gcda
        -:    0:Runs:2
        -:    0:Programs:1
        -:    1:#include "dominion.h"
        -:    2:#include "dominion_helpers.h"
        -:    3:#include "rngs.h"
        -:    4:#include <stdio.h>
        -:    5:#include <math.h>
        -:    6:#include <stdlib.h>
        -:    7:
function compare called 126 returned 100% blocks executed 85%
        -:    8:int compare(const void* a, const void* b) {
      126:    9:  if (*(int*)a > *(int*)b)
      126:    9-block  0
branch  0 taken 30
branch  1 taken 96
       30:   10:    return 1;
       30:   10-block  0
unconditional  0 taken 30
       96:   11:  if (*(int*)a < *(int*)b)
       96:   11-block  0
branch  0 taken 96
branch  1 taken 0
       96:   12:    return -1;
       96:   12-block  0
unconditional  0 taken 96
    #####:   13:  return 0;
    $$$$$:   13-block  0
unconditional  0 never executed
      126:   14:}
      126:   14-block  0
unconditional  0 taken 126
        -:   15:
function newGame called 0 returned 0% blocks executed 0%
        -:   16:struct gameState* newGame() {
    #####:   17:  struct gameState* g = malloc(sizeof(struct gameState));
    $$$$$:   17-block  0
unconditional  0 never executed
    #####:   18:  return g;
    $$$$$:   18-block  0
unconditional  0 never executed
        -:   19:}
        -:   20:
function kingdomCards called 0 returned 0% blocks executed 0%
        -:   21:int* kingdomCards(int k1, int k2, int k3, int k4, int k5, int k6, int k7,
        -:   22:		  int k8, int k9, int k10) {
    #####:   23:  int* k = malloc(10 * sizeof(int));
    #####:   24:  k[0] = k1;
    #####:   25:  k[1] = k2;
    #####:   26:  k[2] = k3;
    #####:   27:  k[3] = k4;
    #####:   28:  k[4] = k5;
    #####:   29:  k[5] = k6;
    #####:   30:  k[6] = k7;
    #####:   31:  k[7] = k8;
    #####:   32:  k[8] = k9;
    #####:   33:  k[9] = k10;
    #####:   34:  return k;
    $$$$$:   34-block  0
unconditional  0 never executed
        -:   35:}
        -:   36:
function initializeGame called 0 returned 0% blocks executed 0%
        -:   37:int initializeGame(int numPlayers, int kingdomCards[10], int randomSeed, struct gameState *state) {
        -:   38:
        -:   39:  int i;
        -:   40:  int j;
        -:   41:  int it;
        -:   42:  //set up random number generator
    #####:   43:  SelectStream(1);
    #####:   44:  PutSeed((long)randomSeed);
        -:   45:
        -:   46:  //check number of players
    #####:   47:  if (numPlayers > MAX_PLAYERS || numPlayers < 2)
    $$$$$:   47-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:   47-block  1
branch  2 never executed
branch  3 never executed
        -:   48:    {
    #####:   49:      return -1;
    $$$$$:   49-block  0
unconditional  0 never executed
        -:   50:    }
        -:   51:
        -:   52:  //set number of players
    #####:   53:  state->numPlayers = numPlayers;
        -:   54:
        -:   55:  //check selected kingdom cards are different
    #####:   56:  for (i = 0; i < 10; i++) {
    $$$$$:   56-block  0
unconditional  0 never executed
    $$$$$:   56-block  1
branch  1 never executed
branch  2 never executed
    $$$$$:   56-block  2
unconditional  3 never executed
    #####:   57:    for (j = 0; j < 10; j++) {
    $$$$$:   57-block  0
unconditional  0 never executed
    $$$$$:   57-block  1
branch  1 never executed
branch  2 never executed
    $$$$$:   57-block  2
unconditional  3 never executed
    #####:   58:      if (j != i && kingdomCards[j] == kingdomCards[i]) {
    $$$$$:   58-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:   58-block  1
branch  2 never executed
branch  3 never executed
    #####:   59:        return -1;
    $$$$$:   59-block  0
unconditional  0 never executed
        -:   60:      }
    #####:   61:    }
    $$$$$:   61-block  0
unconditional  0 never executed
    #####:   62:  }
    $$$$$:   62-block  0
unconditional  0 never executed
        -:   63:
        -:   64:
        -:   65:  //initialize supply
        -:   66:  ///////////////////////////////
        -:   67:
        -:   68:  //set number of Curse cards
    #####:   69:  if (numPlayers == 2)
    $$$$$:   69-block  0
branch  0 never executed
branch  1 never executed
        -:   70:    {
    #####:   71:      state->supplyCount[curse] = 10;
    #####:   72:    }
    $$$$$:   72-block  0
unconditional  0 never executed
    #####:   73:  else if (numPlayers == 3)
    $$$$$:   73-block  0
branch  0 never executed
branch  1 never executed
        -:   74:    {
    #####:   75:      state->supplyCount[curse] = 20;
    #####:   76:    }
    $$$$$:   76-block  0
unconditional  0 never executed
        -:   77:  else
        -:   78:    {
    #####:   79:      state->supplyCount[curse] = 30;
    $$$$$:   79-block  0
unconditional  0 never executed
        -:   80:    }
        -:   81:
        -:   82:  //set number of Victory cards
    #####:   83:  if (numPlayers == 2)
    $$$$$:   83-block  0
branch  0 never executed
branch  1 never executed
        -:   84:    {
    #####:   85:      state->supplyCount[estate] = 8;
    #####:   86:      state->supplyCount[duchy] = 8;
    #####:   87:      state->supplyCount[province] = 8;
    #####:   88:    }
    $$$$$:   88-block  0
unconditional  0 never executed
        -:   89:  else
        -:   90:    {
    #####:   91:      state->supplyCount[estate] = 12;
    #####:   92:      state->supplyCount[duchy] = 12;
    #####:   93:      state->supplyCount[province] = 12;
    $$$$$:   93-block  0
unconditional  0 never executed
        -:   94:    }
        -:   95:
        -:   96:  //set number of Treasure cards
    #####:   97:  state->supplyCount[copper] = 60 - (7 * numPlayers);
    #####:   98:  state->supplyCount[silver] = 40;
    #####:   99:  state->supplyCount[gold] = 30;
        -:  100:
        -:  101:  //set number of Kingdom cards
    #####:  102:  for (i = adventurer; i <= treasure_map; i++)  {     	//loop all cards
    $$$$$:  102-block  0
unconditional  0 never executed
    $$$$$:  102-block  1
branch  1 never executed
branch  2 never executed
    $$$$$:  102-block  2
unconditional  3 never executed
    #####:  103:    for (j = 0; j < 10; j++) {           		//loop chosen cards
    $$$$$:  103-block  0
unconditional  0 never executed
    $$$$$:  103-block  1
branch  1 never executed
branch  2 never executed
    $$$$$:  103-block  2
unconditional  3 never executed
    #####:  104:  	  if (kingdomCards[j] == i) {
    $$$$$:  104-block  0
branch  0 never executed
branch  1 never executed
        -:  105:	      //check if card is a 'Victory' Kingdom card
    #####:  106:	      if (kingdomCards[j] == great_hall || kingdomCards[j] == gardens) {
    $$$$$:  106-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  106-block  1
branch  2 never executed
branch  3 never executed
    #####:  107:  		    if (numPlayers == 2){
    $$$$$:  107-block  0
branch  0 never executed
branch  1 never executed
    #####:  108:  		      state->supplyCount[i] = 8;
    #####:  109:  		    }
    $$$$$:  109-block  0
unconditional  0 never executed
        -:  110:  		    else{
    #####:  111:            state->supplyCount[i] = 12;
    $$$$$:  111-block  0
unconditional  0 never executed
        -:  112:          }
    #####:  113:  		  }
    $$$$$:  113-block  0
unconditional  0 never executed
        -:  114:  	    else {
    #####:  115:  		    state->supplyCount[i] = 10;
    $$$$$:  115-block  0
unconditional  0 never executed
        -:  116:  		  }
    #####:  117:  	    break;
    $$$$$:  117-block  0
unconditional  0 never executed
        -:  118:  	  }
        -:  119:  	  else {    //card is not in the set choosen for the game
    #####:  120:  	      state->supplyCount[i] = -1;
    $$$$$:  120-block  0
unconditional  0 never executed
        -:  121:  	  }
    #####:  122:  	}
    $$$$$:  122-block  0
unconditional  0 never executed
    #####:  123:  }
    $$$$$:  123-block  0
unconditional  0 never executed
        -:  124:
        -:  125:  ////////////////////////
        -:  126:  //supply intilization complete
        -:  127:
        -:  128:  //set player decks
    #####:  129:  for (i = 0; i < numPlayers; i++) {
    $$$$$:  129-block  0
unconditional  0 never executed
    $$$$$:  129-block  1
branch  1 never executed
branch  2 never executed
    $$$$$:  129-block  2
unconditional  3 never executed
    #####:  130:    state->deckCount[i] = 0;
    #####:  131:    for (j = 0; j < 3; j++) {
    $$$$$:  131-block  0
unconditional  0 never executed
    $$$$$:  131-block  1
branch  1 never executed
branch  2 never executed
    $$$$$:  131-block  2
unconditional  3 never executed
    #####:  132:      state->deck[i][j] = estate;
    #####:  133:      state->deckCount[i]++;
    #####:  134:    }
    $$$$$:  134-block  0
unconditional  0 never executed
    #####:  135:    for (j = 3; j < 10; j++) {
    $$$$$:  135-block  0
unconditional  0 never executed
    $$$$$:  135-block  1
branch  1 never executed
branch  2 never executed
    $$$$$:  135-block  2
unconditional  3 never executed
    #####:  136:      state->deck[i][j] = copper;
    #####:  137:      state->deckCount[i]++;
    #####:  138:    }
    $$$$$:  138-block  0
unconditional  0 never executed
    #####:  139:  }
    $$$$$:  139-block  0
unconditional  0 never executed
        -:  140:
        -:  141:  //shuffle player decks
    #####:  142:  for (i = 0; i < numPlayers; i++) {
    $$$$$:  142-block  0
unconditional  0 never executed
    $$$$$:  142-block  1
branch  1 never executed
branch  2 never executed
    $$$$$:  142-block  2
unconditional  3 never executed
    #####:  143:    if ( shuffle(i, state) < 0 ) {
    $$$$$:  143-block  0
branch  0 never executed
branch  1 never executed
    #####:  144:	     return -1;
    $$$$$:  144-block  0
unconditional  0 never executed
        -:  145:    }
    #####:  146:  }
    $$$$$:  146-block  0
unconditional  0 never executed
        -:  147:
        -:  148:  //draw player hands
    #####:  149:  for (i = 0; i < numPlayers; i++)
    $$$$$:  149-block  0
unconditional  0 never executed
    $$$$$:  149-block  1
branch  1 never executed
branch  2 never executed
    $$$$$:  149-block  2
unconditional  3 never executed
        -:  150:    {
        -:  151:      //initialize hand size to zero
    #####:  152:      state->handCount[i] = 0;
    #####:  153:      state->discardCount[i] = 0;
        -:  154:      //draw 5 cards
        -:  155:      // for (j = 0; j < 5; j++)
        -:  156:      //	{
        -:  157:      //	  drawCard(i, state);
        -:  158:      //	}
    #####:  159:    }
    $$$$$:  159-block  0
unconditional  0 never executed
        -:  160:
        -:  161:  //set embargo tokens to 0 for all supply piles
    #####:  162:  for (i = 0; i <= treasure_map; i++)
    $$$$$:  162-block  0
unconditional  0 never executed
    $$$$$:  162-block  1
branch  1 never executed
branch  2 never executed
    $$$$$:  162-block  2
unconditional  3 never executed
        -:  163:    {
    #####:  164:      state->embargoTokens[i] = 0;
    #####:  165:    }
    $$$$$:  165-block  0
unconditional  0 never executed
        -:  166:
        -:  167:  //initialize first player's turn
    #####:  168:  state->outpostPlayed = 0;
    #####:  169:  state->phase = 0;
    #####:  170:  state->numActions = 1;
    #####:  171:  state->numBuys = 1;
    #####:  172:  state->playedCardCount = 0;
    #####:  173:  state->whoseTurn = 0;
    #####:  174:  state->handCount[state->whoseTurn] = 0;
        -:  175:  //int it; move to top
        -:  176:
        -:  177:  //Moved draw cards to here, only drawing at the start of a turn
    #####:  178:  for (it = 0; it < 5; it++){
    $$$$$:  178-block  0
unconditional  0 never executed
    $$$$$:  178-block  1
branch  1 never executed
branch  2 never executed
    $$$$$:  178-block  2
unconditional  3 never executed
    #####:  179:    drawCard(state->whoseTurn, state);
    #####:  180:  }
    $$$$$:  180-block  0
unconditional  0 never executed
        -:  181:
    #####:  182:  updateCoins(state->whoseTurn, state, 0);
        -:  183:
    #####:  184:  return 0;
    $$$$$:  184-block  0
unconditional  0 never executed
    #####:  185:}
    $$$$$:  185-block  0
unconditional  0 never executed
        -:  186:
function shuffle called 88 returned 100% blocks executed 100%
        -:  187:int shuffle(int player, struct gameState *state) {
        -:  188:
        -:  189:  int newDeck[MAX_DECK];
       88:  190:  int newDeckPos = 0;
        -:  191:  int card;
        -:  192:  int i;
        -:  193:
       88:  194:  if (state->deckCount[player] < 1)
       88:  194-block  0
branch  0 taken 80
branch  1 taken 8
       80:  195:    return -1;
       80:  195-block  0
unconditional  0 taken 80
        8:  196:  qsort ((void*)(state->deck[player]), state->deckCount[player], sizeof(int), compare);
        -:  197:  /* SORT CARDS IN DECK TO ENSURE DETERMINISM! */
        -:  198:
       70:  199:  while (state->deckCount[player] > 0) {
        8:  199-block  0
unconditional  0 taken 8
       70:  199-block  1
branch  1 taken 62
branch  2 taken 8
       62:  199-block  2
unconditional  3 taken 62
       62:  200:    card = floor(Random() * state->deckCount[player]);
       62:  201:    newDeck[newDeckPos] = state->deck[player][card];
       62:  202:    newDeckPos++;
      229:  203:    for (i = card; i < state->deckCount[player]-1; i++) {
       62:  203-block  0
unconditional  0 taken 62
      229:  203-block  1
branch  1 taken 167
branch  2 taken 62
      167:  203-block  2
unconditional  3 taken 167
      167:  204:      state->deck[player][i] = state->deck[player][i+1];
      167:  205:    }
      167:  205-block  0
unconditional  0 taken 167
       62:  206:    state->deckCount[player]--;
        -:  207:  }
       70:  208:  for (i = 0; i < newDeckPos; i++) {
        8:  208-block  0
unconditional  0 taken 8
       70:  208-block  1
branch  1 taken 62
branch  2 taken 8
       62:  208-block  2
unconditional  3 taken 62
       62:  209:    state->deck[player][i] = newDeck[i];
       62:  210:    state->deckCount[player]++;
       62:  211:  }
       62:  211-block  0
unconditional  0 taken 62
        -:  212:
        8:  213:  return 0;
        8:  213-block  0
unconditional  0 taken 8
       88:  214:}
       88:  214-block  0
unconditional  0 taken 88
        -:  215:
function playCard called 0 returned 0% blocks executed 0%
        -:  216:int playCard(int handPos, int choice1, int choice2, int choice3, struct gameState *state) {
        -:  217:  int card;
    #####:  218:  int coin_bonus = 0; 		//tracks coins gain from actions
        -:  219:
        -:  220:  //check if it is the right phase
    #####:  221:  if (state->phase != 0)
    $$$$$:  221-block  0
branch  0 never executed
branch  1 never executed
        -:  222:    {
    #####:  223:      return -1;
    $$$$$:  223-block  0
unconditional  0 never executed
        -:  224:    }
        -:  225:
        -:  226:  //check if player has enough actions
    #####:  227:  if ( state->numActions < 1 )
    $$$$$:  227-block  0
branch  0 never executed
branch  1 never executed
        -:  228:    {
    #####:  229:      return -1;
    $$$$$:  229-block  0
unconditional  0 never executed
        -:  230:    }
        -:  231:
        -:  232:  //get card played
    #####:  233:  card = handCard(handPos, state);
        -:  234:
        -:  235:  //check if selected card is an action
    #####:  236:  if ( card < adventurer || card > treasure_map )
    $$$$$:  236-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  236-block  1
branch  2 never executed
branch  3 never executed
        -:  237:    {
    #####:  238:      return -1;
    $$$$$:  238-block  0
unconditional  0 never executed
        -:  239:    }
        -:  240:
        -:  241:  //play card
    #####:  242:  if ( cardEffect(card, choice1, choice2, choice3, state, handPos, &coin_bonus) < 0 )
    $$$$$:  242-block  0
branch  0 never executed
branch  1 never executed
        -:  243:    {
    #####:  244:      return -1;
    $$$$$:  244-block  0
unconditional  0 never executed
        -:  245:    }
        -:  246:
        -:  247:  //reduce number of actions
    #####:  248:  state->numActions--;
        -:  249:
        -:  250:  //update coins (Treasure cards may be added with card draws)
    #####:  251:  updateCoins(state->whoseTurn, state, coin_bonus);
        -:  252:
    #####:  253:  return 0;
    $$$$$:  253-block  0
unconditional  0 never executed
    #####:  254:}
    $$$$$:  254-block  0
unconditional  0 never executed
        -:  255:
function buyCard called 0 returned 0% blocks executed 0%
        -:  256:int buyCard(int supplyPos, struct gameState *state) {
        -:  257:  int who;
        -:  258:  if (DEBUG){
        -:  259:    printf("Entering buyCard...\n");
        -:  260:  }
        -:  261:
        -:  262:  // I don't know what to do about the phase thing.
        -:  263:
    #####:  264:  who = state->whoseTurn;
        -:  265:
    #####:  266:  if (state->numBuys < 1){
    $$$$$:  266-block  0
branch  0 never executed
branch  1 never executed
        -:  267:    if (DEBUG)
        -:  268:      printf("You do not have any buys left\n");
    #####:  269:    return -1;
    $$$$$:  269-block  0
unconditional  0 never executed
        -:  270:  }
    #####:  271:  else if (supplyCount(supplyPos, state) <1){
    $$$$$:  271-block  0
branch  0 never executed
branch  1 never executed
        -:  272:    if (DEBUG)
        -:  273:      printf("There are not any of that type of card left\n");
    #####:  274:    return -1;
    $$$$$:  274-block  0
unconditional  0 never executed
        -:  275:  }
    #####:  276:  else if (state->coins < getCost(supplyPos)){
    $$$$$:  276-block  0
branch  0 never executed
branch  1 never executed
        -:  277:    if (DEBUG)
        -:  278:      printf("You do not have enough money to buy that. You have %d coins.\n", state->coins);
    #####:  279:    return -1;
    $$$$$:  279-block  0
unconditional  0 never executed
        -:  280:  }
        -:  281:  else {
    #####:  282:    state->phase=1;   //Prob shouldn't be here???/
        -:  283:
        -:  284:    //state->supplyCount[supplyPos]--;
    #####:  285:    gainCard(supplyPos, state, 0, who); //card goes in discard, this might be wrong.. (2 means goes into hand, 0 goes into discard)
        -:  286:
    #####:  287:    state->coins = (state->coins) - (getCost(supplyPos));
    #####:  288:    state->numBuys--;
    $$$$$:  288-block  0
unconditional  0 never executed
        -:  289:    if (DEBUG)
        -:  290:      printf("You bought card number %d for %d coins. You now have %d buys and %d coins.\n", supplyPos, getCost(supplyPos), state->numBuys, state->coins);
        -:  291:  }
        -:  292:
        -:  293:  //state->discard[who][state->discardCount[who]] = supplyPos;
        -:  294:  //state->discardCount[who]++;
        -:  295:
    #####:  296:  return 0;
    $$$$$:  296-block  0
unconditional  0 never executed
    #####:  297:}
    $$$$$:  297-block  0
unconditional  0 never executed
        -:  298:
function numHandCards called 0 returned 0% blocks executed 0%
        -:  299:int numHandCards(struct gameState *state) {
    #####:  300:  return state->handCount[ whoseTurn(state) ];
    $$$$$:  300-block  0
unconditional  0 never executed
        -:  301:}
        -:  302:
function handCard called 0 returned 0% blocks executed 0%
        -:  303:int handCard(int handPos, struct gameState *state) {
    #####:  304:  int currentPlayer = whoseTurn(state);
    #####:  305:  return state->hand[currentPlayer][handPos];
    $$$$$:  305-block  0
unconditional  0 never executed
        -:  306:}
        -:  307:
function supplyCount called 0 returned 0% blocks executed 0%
        -:  308:int supplyCount(int card, struct gameState *state) {
    #####:  309:  return state->supplyCount[card];
    $$$$$:  309-block  0
unconditional  0 never executed
        -:  310:}
        -:  311:
function fullDeckCount called 0 returned 0% blocks executed 0%
        -:  312:int fullDeckCount(int player, int card, struct gameState *state) {
        -:  313:  int i;
    #####:  314:  int count = 0;
        -:  315:
    #####:  316:  for (i = 0; i < state->deckCount[player]; i++)
    $$$$$:  316-block  0
unconditional  0 never executed
    $$$$$:  316-block  1
branch  1 never executed
branch  2 never executed
    $$$$$:  316-block  2
unconditional  3 never executed
        -:  317:    {
    #####:  318:      if (state->deck[player][i] == card) count++;
    $$$$$:  318-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  318-block  1
unconditional  2 never executed
    #####:  319:    }
    $$$$$:  319-block  0
unconditional  0 never executed
        -:  320:
    #####:  321:  for (i = 0; i < state->handCount[player]; i++)
    $$$$$:  321-block  0
unconditional  0 never executed
    $$$$$:  321-block  1
branch  1 never executed
branch  2 never executed
    $$$$$:  321-block  2
unconditional  3 never executed
        -:  322:    {
    #####:  323:      if (state->hand[player][i] == card) count++;
    $$$$$:  323-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  323-block  1
unconditional  2 never executed
    #####:  324:    }
    $$$$$:  324-block  0
unconditional  0 never executed
        -:  325:
    #####:  326:  for (i = 0; i < state->discardCount[player]; i++)
    $$$$$:  326-block  0
unconditional  0 never executed
    $$$$$:  326-block  1
branch  1 never executed
branch  2 never executed
    $$$$$:  326-block  2
unconditional  3 never executed
        -:  327:    {
    #####:  328:      if (state->discard[player][i] == card) count++;
    $$$$$:  328-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  328-block  1
unconditional  2 never executed
    #####:  329:    }
    $$$$$:  329-block  0
unconditional  0 never executed
        -:  330:
    #####:  331:  return count;
    $$$$$:  331-block  0
unconditional  0 never executed
        -:  332:}
        -:  333:
function whoseTurn called 21 returned 100% blocks executed 100%
        -:  334:int whoseTurn(struct gameState *state) {
       21:  335:  return state->whoseTurn;
       21:  335-block  0
unconditional  0 taken 21
        -:  336:}
        -:  337:
function endTurn called 0 returned 0% blocks executed 0%
        -:  338:int endTurn(struct gameState *state) {
        -:  339:  int k;
        -:  340:  int i;
    #####:  341:  int currentPlayer = whoseTurn(state);
        -:  342:
        -:  343:  //Discard hand
    #####:  344:  for (i = 0; i < state->handCount[currentPlayer]; i++){
    $$$$$:  344-block  0
unconditional  0 never executed
    $$$$$:  344-block  1
branch  1 never executed
branch  2 never executed
    $$$$$:  344-block  2
unconditional  3 never executed
    #####:  345:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = state->hand[currentPlayer][i];//Discard
    #####:  346:    state->hand[currentPlayer][i] = -1;//Set card to -1
    #####:  347:  }
    $$$$$:  347-block  0
unconditional  0 never executed
    #####:  348:  state->handCount[currentPlayer] = 0;//Reset hand count
        -:  349:
        -:  350:  //Code for determining the player
    #####:  351:  if (currentPlayer < (state->numPlayers - 1)){
    $$$$$:  351-block  0
branch  0 never executed
branch  1 never executed
    #####:  352:    state->whoseTurn = currentPlayer + 1;//Still safe to increment
    #####:  353:  }
    $$$$$:  353-block  0
unconditional  0 never executed
        -:  354:  else{
    #####:  355:    state->whoseTurn = 0;//Max player has been reached, loop back around to player 1
    $$$$$:  355-block  0
unconditional  0 never executed
        -:  356:  }
        -:  357:
    #####:  358:  state->outpostPlayed = 0;
    #####:  359:  state->phase = 0;
    #####:  360:  state->numActions = 1;
    #####:  361:  state->coins = 0;
    #####:  362:  state->numBuys = 1;
    #####:  363:  state->playedCardCount = 0;
    #####:  364:  state->handCount[state->whoseTurn] = 0;
        -:  365:
        -:  366:  //int k; move to top
        -:  367:  //Next player draws hand
    #####:  368:  for (k = 0; k < 5; k++){
    $$$$$:  368-block  0
unconditional  0 never executed
    $$$$$:  368-block  1
branch  1 never executed
branch  2 never executed
    $$$$$:  368-block  2
unconditional  3 never executed
    #####:  369:    drawCard(state->whoseTurn, state);//Draw a card
    #####:  370:  }
    $$$$$:  370-block  0
unconditional  0 never executed
        -:  371:
        -:  372:  //Update money
    #####:  373:  updateCoins(state->whoseTurn, state , 0);
        -:  374:
    #####:  375:  return 0;
    $$$$$:  375-block  0
unconditional  0 never executed
        -:  376:}
        -:  377:
function isGameOver called 0 returned 0% blocks executed 0%
        -:  378:int isGameOver(struct gameState *state) {
        -:  379:  int i;
        -:  380:  int j;
        -:  381:
        -:  382:  //if stack of Province cards is empty, the game ends
    #####:  383:  if (state->supplyCount[province] == 0) {
    $$$$$:  383-block  0
branch  0 never executed
branch  1 never executed
    #####:  384:    return 1;
    $$$$$:  384-block  0
unconditional  0 never executed
        -:  385:  }
        -:  386:
        -:  387:  //if three supply pile are at 0, the game ends
    #####:  388:  j = 0;
    #####:  389:  for (i = 0; i < 25; i++)
    $$$$$:  389-block  0
unconditional  0 never executed
    $$$$$:  389-block  1
branch  1 never executed
branch  2 never executed
    $$$$$:  389-block  2
unconditional  3 never executed
        -:  390:    {
    #####:  391:      if (state->supplyCount[i] == 0)
    $$$$$:  391-block  0
branch  0 never executed
branch  1 never executed
        -:  392:	{
    #####:  393:	  j++;
    #####:  394:	}
    $$$$$:  394-block  0
unconditional  0 never executed
    #####:  395:    }
    $$$$$:  395-block  0
unconditional  0 never executed
    #####:  396:  if ( j >= 3)
    $$$$$:  396-block  0
branch  0 never executed
branch  1 never executed
        -:  397:    {
    #####:  398:      return 1;
    $$$$$:  398-block  0
unconditional  0 never executed
        -:  399:    }
        -:  400:
    #####:  401:  return 0;
    $$$$$:  401-block  0
unconditional  0 never executed
    #####:  402:}
    $$$$$:  402-block  0
unconditional  0 never executed
        -:  403:
function scoreFor called 0 returned 0% blocks executed 0%
        -:  404:int scoreFor (int player, struct gameState *state) {
        -:  405:
        -:  406:  int i;
    #####:  407:  int score = 0;
        -:  408:  //score from hand
    #####:  409:  for (i = 0; i < state->handCount[player]; i++)
    $$$$$:  409-block  0
unconditional  0 never executed
    $$$$$:  409-block  1
branch  1 never executed
branch  2 never executed
    $$$$$:  409-block  2
unconditional  3 never executed
        -:  410:    {
    #####:  411:      if (state->hand[player][i] == curse) { score = score - 1; };
    $$$$$:  411-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  411-block  1
unconditional  2 never executed
    #####:  412:      if (state->hand[player][i] == estate) { score = score + 1; };
    $$$$$:  412-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  412-block  1
unconditional  2 never executed
    #####:  413:      if (state->hand[player][i] == duchy) { score = score + 3; };
    $$$$$:  413-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  413-block  1
unconditional  2 never executed
    #####:  414:      if (state->hand[player][i] == province) { score = score + 6; };
    $$$$$:  414-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  414-block  1
unconditional  2 never executed
    #####:  415:      if (state->hand[player][i] == great_hall) { score = score + 1; };
    $$$$$:  415-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  415-block  1
unconditional  2 never executed
    #####:  416:      if (state->hand[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    $$$$$:  416-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  416-block  1
unconditional  2 never executed
    #####:  417:    }
    $$$$$:  417-block  0
unconditional  0 never executed
        -:  418:
        -:  419:  //score from discard
    #####:  420:  for (i = 0; i < state->discardCount[player]; i++)
    $$$$$:  420-block  0
unconditional  0 never executed
    $$$$$:  420-block  1
branch  1 never executed
branch  2 never executed
    $$$$$:  420-block  2
unconditional  3 never executed
        -:  421:    {
    #####:  422:      if (state->discard[player][i] == curse) { score = score - 1; };
    $$$$$:  422-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  422-block  1
unconditional  2 never executed
    #####:  423:      if (state->discard[player][i] == estate) { score = score + 1; };
    $$$$$:  423-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  423-block  1
unconditional  2 never executed
    #####:  424:      if (state->discard[player][i] == duchy) { score = score + 3; };
    $$$$$:  424-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  424-block  1
unconditional  2 never executed
    #####:  425:      if (state->discard[player][i] == province) { score = score + 6; };
    $$$$$:  425-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  425-block  1
unconditional  2 never executed
    #####:  426:      if (state->discard[player][i] == great_hall) { score = score + 1; };
    $$$$$:  426-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  426-block  1
unconditional  2 never executed
    #####:  427:      if (state->discard[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    $$$$$:  427-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  427-block  1
unconditional  2 never executed
    #####:  428:    }
    $$$$$:  428-block  0
unconditional  0 never executed
        -:  429:
        -:  430:  //score from deck
    #####:  431:  for (i = 0; i < state->discardCount[player]; i++)
    $$$$$:  431-block  0
unconditional  0 never executed
    $$$$$:  431-block  1
branch  1 never executed
branch  2 never executed
    $$$$$:  431-block  2
unconditional  3 never executed
        -:  432:    {
    #####:  433:      if (state->deck[player][i] == curse) { score = score - 1; };
    $$$$$:  433-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  433-block  1
unconditional  2 never executed
    #####:  434:      if (state->deck[player][i] == estate) { score = score + 1; };
    $$$$$:  434-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  434-block  1
unconditional  2 never executed
    #####:  435:      if (state->deck[player][i] == duchy) { score = score + 3; };
    $$$$$:  435-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  435-block  1
unconditional  2 never executed
    #####:  436:      if (state->deck[player][i] == province) { score = score + 6; };
    $$$$$:  436-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  436-block  1
unconditional  2 never executed
    #####:  437:      if (state->deck[player][i] == great_hall) { score = score + 1; };
    $$$$$:  437-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  437-block  1
unconditional  2 never executed
    #####:  438:      if (state->deck[player][i] == gardens) { score = score + ( fullDeckCount(player, 0, state) / 10 ); };
    $$$$$:  438-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  438-block  1
unconditional  2 never executed
    #####:  439:    }
    $$$$$:  439-block  0
unconditional  0 never executed
        -:  440:
    #####:  441:  return score;
    $$$$$:  441-block  0
unconditional  0 never executed
        -:  442:}
        -:  443:
function getWinners called 0 returned 0% blocks executed 0%
        -:  444:int getWinners(int players[MAX_PLAYERS], struct gameState *state) {
        -:  445:  int i;
        -:  446:  int j;
        -:  447:  int highScore;
        -:  448:  int currentPlayer;
        -:  449:
        -:  450:  //get score for each player
    #####:  451:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  451-block  0
unconditional  0 never executed
    $$$$$:  451-block  1
branch  1 never executed
branch  2 never executed
    $$$$$:  451-block  2
unconditional  3 never executed
        -:  452:    {
        -:  453:      //set unused player scores to -9999
    #####:  454:      if (i >= state->numPlayers)
    $$$$$:  454-block  0
branch  0 never executed
branch  1 never executed
        -:  455:	{
    #####:  456:	  players[i] = -9999;
    #####:  457:	}
    $$$$$:  457-block  0
unconditional  0 never executed
        -:  458:      else
        -:  459:	{
    #####:  460:	  players[i] = scoreFor (i, state);
    $$$$$:  460-block  0
unconditional  0 never executed
        -:  461:	}
    #####:  462:    }
    $$$$$:  462-block  0
unconditional  0 never executed
        -:  463:
        -:  464:  //find highest score
    #####:  465:  j = 0;
    #####:  466:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  466-block  0
unconditional  0 never executed
    $$$$$:  466-block  1
branch  1 never executed
branch  2 never executed
    $$$$$:  466-block  2
unconditional  3 never executed
        -:  467:    {
    #####:  468:      if (players[i] > players[j])
    $$$$$:  468-block  0
branch  0 never executed
branch  1 never executed
        -:  469:	{
    #####:  470:	  j = i;
    #####:  471:	}
    $$$$$:  471-block  0
unconditional  0 never executed
    #####:  472:    }
    $$$$$:  472-block  0
unconditional  0 never executed
    #####:  473:  highScore = players[j];
        -:  474:
        -:  475:  //add 1 to players who had less turns
    #####:  476:  currentPlayer = whoseTurn(state);
    #####:  477:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  477-block  0
unconditional  0 never executed
    $$$$$:  477-block  1
branch  1 never executed
branch  2 never executed
    $$$$$:  477-block  2
unconditional  3 never executed
        -:  478:    {
    #####:  479:      if ( players[i] == highScore && i > currentPlayer )
    $$$$$:  479-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  479-block  1
branch  2 never executed
branch  3 never executed
        -:  480:	{
    #####:  481:	  players[i]++;
    #####:  482:	}
    $$$$$:  482-block  0
unconditional  0 never executed
    #####:  483:    }
    $$$$$:  483-block  0
unconditional  0 never executed
        -:  484:
        -:  485:  //find new highest score
    #####:  486:  j = 0;
    #####:  487:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  487-block  0
unconditional  0 never executed
    $$$$$:  487-block  1
branch  1 never executed
branch  2 never executed
    $$$$$:  487-block  2
unconditional  3 never executed
        -:  488:    {
    #####:  489:      if ( players[i] > players[j] )
    $$$$$:  489-block  0
branch  0 never executed
branch  1 never executed
        -:  490:	{
    #####:  491:	  j = i;
    #####:  492:	}
    $$$$$:  492-block  0
unconditional  0 never executed
    #####:  493:    }
    $$$$$:  493-block  0
unconditional  0 never executed
    #####:  494:  highScore = players[j];
        -:  495:
        -:  496:  //set winners in array to 1 and rest to 0
    #####:  497:  for (i = 0; i < MAX_PLAYERS; i++)
    $$$$$:  497-block  0
unconditional  0 never executed
    $$$$$:  497-block  1
branch  1 never executed
branch  2 never executed
    $$$$$:  497-block  2
unconditional  3 never executed
        -:  498:    {
    #####:  499:      if ( players[i] == highScore )
    $$$$$:  499-block  0
branch  0 never executed
branch  1 never executed
        -:  500:	{
    #####:  501:	  players[i] = 1;
    #####:  502:	}
    $$$$$:  502-block  0
unconditional  0 never executed
        -:  503:      else
        -:  504:	{
    #####:  505:	  players[i] = 0;
    $$$$$:  505-block  0
unconditional  0 never executed
        -:  506:	}
    #####:  507:    }
    $$$$$:  507-block  0
unconditional  0 never executed
        -:  508:
    #####:  509:  return 0;
    $$$$$:  509-block  0
unconditional  0 never executed
        -:  510:}
        -:  511:
function drawCard called 128 returned 100% blocks executed 100%
        -:  512:int drawCard(int player, struct gameState *state) {
        -:  513:  int count;
        -:  514:  int deckCounter;
      128:  515:  if (state->deckCount[player] <= 0){//Deck is empty
      128:  515-block  0
branch  0 taken 64
branch  1 taken 64
        -:  516:
        -:  517:    //Step 1 Shuffle the discard pile back into a deck
        -:  518:    int i;
        -:  519:    //Move discard to deck
      126:  520:    for (i = 0; i < state->discardCount[player];i++){
       64:  520-block  0
unconditional  0 taken 64
      126:  520-block  1
branch  1 taken 62
branch  2 taken 64
       62:  520-block  2
unconditional  3 taken 62
       62:  521:      state->deck[player][i] = state->discard[player][i];
       62:  522:      state->discard[player][i] = -1;
       62:  523:    }
       62:  523-block  0
unconditional  0 taken 62
        -:  524:
       64:  525:    state->deckCount[player] = state->discardCount[player];
       64:  526:    state->discardCount[player] = 0;//Reset discard
        -:  527:
        -:  528:    //Shufffle the deck
       64:  529:    shuffle(player, state);//Shuffle the deck up and make it so that we can draw
        -:  530:
        -:  531:    if (DEBUG){//Debug statements
        -:  532:      printf("Deck count now: %d\n", state->deckCount[player]);
        -:  533:    }
        -:  534:
       64:  535:    state->discardCount[player] = 0;
        -:  536:
        -:  537:    //Step 2 Draw Card
       64:  538:    count = state->handCount[player];//Get current player's hand count
        -:  539:
        -:  540:    if (DEBUG){//Debug statements
        -:  541:      printf("Current hand count: %d\n", count);
        -:  542:    }
        -:  543:
       64:  544:    deckCounter = state->deckCount[player];//Create a holder for the deck count
        -:  545:
       64:  546:    if (deckCounter == 0)
       64:  546-block  0
branch  0 taken 56
branch  1 taken 8
       56:  547:      return -1;
       56:  547-block  0
unconditional  0 taken 56
        -:  548:
        8:  549:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to hand
        8:  550:    state->deckCount[player]--;
        8:  551:    state->handCount[player]++;//Increment hand count
        8:  552:  }
        8:  552-block  0
unconditional  0 taken 8
        -:  553:
        -:  554:  else{
       64:  555:    int count = state->handCount[player];//Get current hand count for player
        -:  556:    int deckCounter;
        -:  557:    if (DEBUG){//Debug statements
        -:  558:      printf("Current hand count: %d\n", count);
        -:  559:    }
        -:  560:
       64:  561:    deckCounter = state->deckCount[player];//Create holder for the deck count
       64:  562:    state->hand[player][count] = state->deck[player][deckCounter - 1];//Add card to the hand
       64:  563:    state->deckCount[player]--;
       64:  564:    state->handCount[player]++;//Increment hand count
       64:  564-block  0
unconditional  0 taken 64
        -:  565:  }
        -:  566:
       72:  567:  return 0;
       72:  567-block  0
unconditional  0 taken 72
      128:  568:}
      128:  568-block  0
unconditional  0 taken 128
        -:  569:
function getCost called 0 returned 0% blocks executed 0%
        -:  570:int getCost(int cardNumber) {
    #####:  571:  switch( cardNumber )
    $$$$$:  571-block  0
branch  0 never executed
branch  1 never executed
branch  2 never executed
branch  3 never executed
branch  4 never executed
branch  5 never executed
branch  6 never executed
branch  7 never executed
branch  8 never executed
branch  9 never executed
branch 10 never executed
branch 11 never executed
branch 12 never executed
branch 13 never executed
branch 14 never executed
branch 15 never executed
branch 16 never executed
branch 17 never executed
branch 18 never executed
branch 19 never executed
branch 20 never executed
branch 21 never executed
branch 22 never executed
branch 23 never executed
branch 24 never executed
branch 25 never executed
branch 26 never executed
branch 27 never executed
        -:  572:    {
        -:  573:    case curse:
    #####:  574:      return 0;
    $$$$$:  574-block  0
unconditional  0 never executed
        -:  575:    case estate:
    #####:  576:      return 2;
    $$$$$:  576-block  0
unconditional  0 never executed
        -:  577:    case duchy:
    #####:  578:      return 5;
    $$$$$:  578-block  0
unconditional  0 never executed
        -:  579:    case province:
    #####:  580:      return 8;
    $$$$$:  580-block  0
unconditional  0 never executed
        -:  581:    case copper:
    #####:  582:      return 0;
    $$$$$:  582-block  0
unconditional  0 never executed
        -:  583:    case silver:
    #####:  584:      return 3;
    $$$$$:  584-block  0
unconditional  0 never executed
        -:  585:    case gold:
    #####:  586:      return 6;
    $$$$$:  586-block  0
unconditional  0 never executed
        -:  587:    case adventurer:
    #####:  588:      return 6;
    $$$$$:  588-block  0
unconditional  0 never executed
        -:  589:    case council_room:
    #####:  590:      return 5;
    $$$$$:  590-block  0
unconditional  0 never executed
        -:  591:    case feast:
    #####:  592:      return 4;
    $$$$$:  592-block  0
unconditional  0 never executed
        -:  593:    case gardens:
    #####:  594:      return 4;
    $$$$$:  594-block  0
unconditional  0 never executed
        -:  595:    case mine:
    #####:  596:      return 5;
    $$$$$:  596-block  0
unconditional  0 never executed
        -:  597:    case remodel:
    #####:  598:      return 4;
    $$$$$:  598-block  0
unconditional  0 never executed
        -:  599:    case smithy:
    #####:  600:      return 4;
    $$$$$:  600-block  0
unconditional  0 never executed
        -:  601:    case village:
    #####:  602:      return 3;
    $$$$$:  602-block  0
unconditional  0 never executed
        -:  603:    case baron:
    #####:  604:      return 4;
    $$$$$:  604-block  0
unconditional  0 never executed
        -:  605:    case great_hall:
    #####:  606:      return 3;
    $$$$$:  606-block  0
unconditional  0 never executed
        -:  607:    case minion:
    #####:  608:      return 5;
    $$$$$:  608-block  0
unconditional  0 never executed
        -:  609:    case steward:
    #####:  610:      return 3;
    $$$$$:  610-block  0
unconditional  0 never executed
        -:  611:    case tribute:
    #####:  612:      return 5;
    $$$$$:  612-block  0
unconditional  0 never executed
        -:  613:    case ambassador:
    #####:  614:      return 3;
    $$$$$:  614-block  0
unconditional  0 never executed
        -:  615:    case cutpurse:
    #####:  616:      return 4;
    $$$$$:  616-block  0
unconditional  0 never executed
        -:  617:    case embargo:
    #####:  618:      return 2;
    $$$$$:  618-block  0
unconditional  0 never executed
        -:  619:    case outpost:
    #####:  620:      return 5;
    $$$$$:  620-block  0
unconditional  0 never executed
        -:  621:    case salvager:
    #####:  622:      return 4;
    $$$$$:  622-block  0
unconditional  0 never executed
        -:  623:    case sea_hag:
    #####:  624:      return 4;
    $$$$$:  624-block  0
unconditional  0 never executed
        -:  625:    case treasure_map:
    #####:  626:      return 4;
    $$$$$:  626-block  0
unconditional  0 never executed
        -:  627:    }
    #####:  628:  return -1;
    $$$$$:  628-block  0
unconditional  0 never executed
    #####:  629:}
    $$$$$:  629-block  0
unconditional  0 never executed
        -:  630:
function cardEffect called 7 returned 100% blocks executed 3%
        -:  631:int cardEffect(int card, int choice1, int choice2, int choice3, struct gameState *state, int handPos, int *bonus) {
        -:  632:  int i;
        -:  633:  int j;
        -:  634:  int k;
        -:  635:  int x;
        -:  636:  int index;
        7:  637:  int currentPlayer = whoseTurn(state);
        7:  638:  int nextPlayer = currentPlayer + 1;
        -:  639:
        7:  640:  int tributeRevealedCards[2] = {-1, -1};
        -:  641:  int temphand[MAX_HAND];// moved above the if statement
        -:  642:
        -:  643:  // UNUSED VARIABLES
        -:  644:  // int drawntreasure=0;
        -:  645:  // int cardDrawn;
        -:  646:  // int z = 0;// this is the counter for the temp hand
        -:  647:  // UNUSED VARIABLES
        -:  648:
        -:  649:
        7:  650:  if (nextPlayer > (state->numPlayers - 1)){
        7:  650-block  0
branch  0 taken 0
branch  1 taken 7
    #####:  651:    nextPlayer = 0;
    #####:  652:  }
    $$$$$:  652-block  0
unconditional  0 never executed
        -:  653:
        -:  654:
        -:  655:  //uses switch to select card and perform actions
       11:  656:  switch( card )
       11:  656-block  0
branch  0 taken 3
branch  1 taken 0
branch  2 taken 0
branch  3 taken 0
branch  4 taken 0
branch  5 taken 0
branch  6 taken 4
branch  7 taken 4
branch  8 taken 0
branch  9 taken 0
branch 10 taken 0
branch 11 taken 0
branch 12 taken 0
branch 13 taken 0
branch 14 taken 0
branch 15 taken 0
branch 16 taken 0
branch 17 taken 0
branch 18 taken 0
branch 19 taken 0
branch 20 taken 0
        -:  657:    {
        -:  658:    // Adventerer
        -:  659:    case adventurer:
        3:  660:      playAdventurer(state);
        -:  661:      //Adding line below
        3:  662:      return 0;
        3:  662-block  0
unconditional  0 taken 3
        -:  663:
        -:  664:    case council_room:
    #####:  665:      playCouncilRoom(state, handPos);
    $$$$$:  665-block  0
unconditional  0 never executed
        -:  666:
        -:  667:    case feast:
        -:  668:      //gain card with cost up to 5
        -:  669:      //Backup hand
    #####:  670:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    $$$$$:  670-block  0
unconditional  0 never executed
    $$$$$:  670-block  1
branch  1 never executed
branch  2 never executed
    $$$$$:  670-block  2
unconditional  3 never executed
    #####:  671:        temphand[i] = state->hand[currentPlayer][i];//Backup card
    #####:  672:        state->hand[currentPlayer][i] = -1;//Set to nothing
    #####:  673:      }
    $$$$$:  673-block  0
unconditional  0 never executed
        -:  674:      //Backup hand
        -:  675:
        -:  676:      //Update Coins for Buy
    #####:  677:      updateCoins(currentPlayer, state, 5);
    #####:  678:      x = 1;//Condition to loop on
    #####:  679:      while( x == 1) {//Buy one card
    $$$$$:  679-block  0
unconditional  0 never executed
    $$$$$:  679-block  1
branch  1 never executed
branch  2 never executed
    $$$$$:  679-block  2
unconditional  3 never executed
    #####:  680:        if (supplyCount(choice1, state) <= 0){
    $$$$$:  680-block  0
branch  0 never executed
branch  1 never executed
        -:  681:          if (DEBUG) {
        -:  682:            printf("None of that card left, sorry!\n");
        -:  683:          }
        -:  684:          if (DEBUG){
        -:  685:            printf("Cards Left: %d\n", supplyCount(choice1, state));
        -:  686:          }
    #####:  687:        }
    $$$$$:  687-block  0
unconditional  0 never executed
    #####:  688:        else if (state->coins < getCost(choice1)){
    $$$$$:  688-block  0
branch  0 never executed
branch  1 never executed
    #####:  689:          printf("That card is too expensive!\n");
        -:  690:          if (DEBUG){
        -:  691:	          printf("Coins: %d < %d\n", state->coins, getCost(choice1));
        -:  692:          }
    #####:  693:        }
    $$$$$:  693-block  0
unconditional  0 never executed
        -:  694:	      else{
        -:  695:          if (DEBUG){
        -:  696:            printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  697:          }
    #####:  698:          gainCard(choice1, state, 0, currentPlayer);//Gain the card
    #####:  699:          x = 0;//No more buying cards
    $$$$$:  699-block  0
unconditional  0 never executed
        -:  700:          if (DEBUG){
        -:  701:            printf("Deck Count: %d\n", state->handCount[currentPlayer] + state->deckCount[currentPlayer] + state->discardCount[currentPlayer]);
        -:  702:          }
        -:  703:        }
        -:  704:      }
        -:  705:
        -:  706:      //Reset Hand
    #####:  707:      for (i = 0; i <= state->handCount[currentPlayer]; i++){
    $$$$$:  707-block  0
unconditional  0 never executed
    $$$$$:  707-block  1
branch  1 never executed
branch  2 never executed
    $$$$$:  707-block  2
unconditional  3 never executed
    #####:  708:        state->hand[currentPlayer][i] = temphand[i];
    #####:  709:        temphand[i] = -1;
    #####:  710:      }
    $$$$$:  710-block  0
unconditional  0 never executed
        -:  711:      //Reset Hand
        -:  712:
    #####:  713:      return 0;
    $$$$$:  713-block  0
unconditional  0 never executed
        -:  714:
        -:  715:    case gardens:
    #####:  716:      return -1;
    $$$$$:  716-block  0
unconditional  0 never executed
        -:  717:
        -:  718:    case mine:
    #####:  719:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  720:
    #####:  721:      if (state->hand[currentPlayer][choice1] < copper || state->hand[currentPlayer][choice1] > gold) {
    $$$$$:  721-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  721-block  1
branch  2 never executed
branch  3 never executed
    #####:  722:        return -1;
    $$$$$:  722-block  0
unconditional  0 never executed
        -:  723:      }
        -:  724:
    #####:  725:      if (choice2 > treasure_map || choice2 < curse) {
    $$$$$:  725-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  725-block  1
branch  2 never executed
branch  3 never executed
    #####:  726:        return -1;
    $$$$$:  726-block  0
unconditional  0 never executed
        -:  727:      }
        -:  728:
    #####:  729:      if ( (getCost(state->hand[currentPlayer][choice1]) + 3) > getCost(choice2) ) {
    $$$$$:  729-block  0
branch  0 never executed
branch  1 never executed
    #####:  730:        return -1;
    $$$$$:  730-block  0
unconditional  0 never executed
        -:  731:    	}
        -:  732:
    #####:  733:      gainCard(choice2, state, 2, currentPlayer);
        -:  734:
        -:  735:      //discard card from hand
    #####:  736:      discardCard(handPos, currentPlayer, state, 0);
        -:  737:
        -:  738:      //discard trashed card
    #####:  739:      for (i = 0; i < state->handCount[currentPlayer]; i++) {
    $$$$$:  739-block  0
unconditional  0 never executed
    $$$$$:  739-block  1
branch  1 never executed
branch  2 never executed
    $$$$$:  739-block  2
unconditional  3 never executed
    #####:  740:	      if (state->hand[currentPlayer][i] == j) {
    $$$$$:  740-block  0
branch  0 never executed
branch  1 never executed
    #####:  741:          discardCard(i, currentPlayer, state, 0);
    #####:  742:          break;
    $$$$$:  742-block  0
unconditional  0 never executed
        -:  743:        }
    #####:  744:      }
    $$$$$:  744-block  0
unconditional  0 never executed
        -:  745:
    #####:  746:      return 0;
    $$$$$:  746-block  0
unconditional  0 never executed
        -:  747:
        -:  748:    case remodel:
    #####:  749:      j = state->hand[currentPlayer][choice1];  //store card we will trash
        -:  750:
    #####:  751:      if ( (getCost(state->hand[currentPlayer][choice1]) + 2) > getCost(choice2) ) {
    $$$$$:  751-block  0
branch  0 never executed
branch  1 never executed
    #####:  752:	      return -1;
    $$$$$:  752-block  0
unconditional  0 never executed
        -:  753:      }
        -:  754:
    #####:  755:      gainCard(choice2, state, 0, currentPlayer);
        -:  756:
        -:  757:      //discard card from hand
    #####:  758:      discardCard(handPos, currentPlayer, state, 0);
        -:  759:
        -:  760:      //discard trashed card
    #####:  761:      for (i = 0; i < state->handCount[currentPlayer]; i++) {
    $$$$$:  761-block  0
unconditional  0 never executed
    $$$$$:  761-block  1
branch  1 never executed
branch  2 never executed
    $$$$$:  761-block  2
unconditional  3 never executed
    #####:  762:        if (state->hand[currentPlayer][i] == j) {
    $$$$$:  762-block  0
branch  0 never executed
branch  1 never executed
    #####:  763:          discardCard(i, currentPlayer, state, 0);
    #####:  764:          break;
    $$$$$:  764-block  0
unconditional  0 never executed
        -:  765:        }
    #####:  766:      }
    $$$$$:  766-block  0
unconditional  0 never executed
        -:  767:
    #####:  768:      return 0;
    $$$$$:  768-block  0
unconditional  0 never executed
        -:  769:
        -:  770:    case smithy:
        4:  771:      playSmithy(state, handPos);
        4:  771-block  0
unconditional  0 taken 4
        -:  772:
        -:  773:    case village:
        -:  774:      //+1 Card
        4:  775:      drawCard(currentPlayer, state);
        -:  776:
        -:  777:      //+2 Actions
        4:  778:      state->numActions = state->numActions + 2;
        -:  779:
        -:  780:      //discard played card from hand
        4:  781:      discardCard(handPos, currentPlayer, state, 0);
        4:  782:      return 0;
        4:  782-block  0
unconditional  0 taken 4
        -:  783:
        -:  784:    case baron:
    #####:  785:      state->numBuys++;//Increase buys by 1!
    #####:  786:      if (choice1 > 0){//Boolean true or going to discard an estate
    $$$$$:  786-block  0
branch  0 never executed
branch  1 never executed
    #####:  787:        int p = 0;//Iterator for hand!
    #####:  788:        int card_not_discarded = 1;//Flag for discard set!
    #####:  789:        while(card_not_discarded){
    $$$$$:  789-block  0
unconditional  0 never executed
    $$$$$:  789-block  1
branch  1 never executed
branch  2 never executed
    $$$$$:  789-block  2
unconditional  3 never executed
    #####:  790:          if (state->hand[currentPlayer][p] == estate){//Found an estate card!
    $$$$$:  790-block  0
branch  0 never executed
branch  1 never executed
    #####:  791:            state->coins += 4;//Add 4 coins to the amount of coins
    #####:  792:            state->discard[currentPlayer][state->discardCount[currentPlayer]] = state->hand[currentPlayer][p];
    #####:  793:            state->discardCount[currentPlayer]++;
    #####:  794:            for (;p < state->handCount[currentPlayer]; p++){
    $$$$$:  794-block  0
unconditional  0 never executed
    $$$$$:  794-block  1
branch  1 never executed
branch  2 never executed
    $$$$$:  794-block  2
unconditional  3 never executed
    #####:  795:              state->hand[currentPlayer][p] = state->hand[currentPlayer][p+1];
    #####:  796:            }
    $$$$$:  796-block  0
unconditional  0 never executed
    #####:  797:            state->hand[currentPlayer][state->handCount[currentPlayer]] = -1;
    #####:  798:            state->handCount[currentPlayer]--;
    #####:  799:            card_not_discarded = 0;//Exit the loop
    #####:  800:          }
    $$$$$:  800-block  0
unconditional  0 never executed
    #####:  801:          else if (p > state->handCount[currentPlayer]){
    $$$$$:  801-block  0
branch  0 never executed
branch  1 never executed
        -:  802:            if(DEBUG) {
        -:  803:              printf("No estate cards in your hand, invalid choice\n");
        -:  804:              printf("Must gain an estate if there are any\n");
        -:  805:            }
    #####:  806:      	    if (supplyCount(estate, state) > 0){
    $$$$$:  806-block  0
branch  0 never executed
branch  1 never executed
    #####:  807:      	      gainCard(estate, state, 0, currentPlayer);
    #####:  808:      	      state->supplyCount[estate]--;//Decrement estates
    #####:  809:      	      if (supplyCount(estate, state) == 0) {
    $$$$$:  809-block  0
branch  0 never executed
branch  1 never executed
    #####:  810:                isGameOver(state);
    #####:  811:              }
    $$$$$:  811-block  0
unconditional  0 never executed
    #####:  812:      	    }
    $$$$$:  812-block  0
unconditional  0 never executed
    #####:  813:      	    card_not_discarded = 0;//Exit the loop
    #####:  814:      	  }
    $$$$$:  814-block  0
unconditional  0 never executed
        -:  815:          else{
    #####:  816:            p++;//Next card
    $$$$$:  816-block  0
unconditional  0 never executed
        -:  817:          }
        -:  818:        }
    #####:  819:      }
    $$$$$:  819-block  0
unconditional  0 never executed
        -:  820:      else{
    #####:  821:        if (supplyCount(estate, state) > 0){
    $$$$$:  821-block  0
branch  0 never executed
branch  1 never executed
    #####:  822:          gainCard(estate, state, 0, currentPlayer);//Gain an estate
    #####:  823:          state->supplyCount[estate]--;//Decrement Estates
    #####:  824:          if (supplyCount(estate, state) == 0){
    $$$$$:  824-block  0
branch  0 never executed
branch  1 never executed
    #####:  825:            isGameOver(state);
    #####:  826:          }
    $$$$$:  826-block  0
unconditional  0 never executed
    #####:  827:        }
    $$$$$:  827-block  0
unconditional  0 never executed
        -:  828:      }
    #####:  829:      return 0;
    $$$$$:  829-block  0
unconditional  0 never executed
        -:  830:
        -:  831:    case great_hall:
    #####:  832:      playGreatHall(state, handPos);
    $$$$$:  832-block  0
unconditional  0 never executed
        -:  833:
        -:  834:    case minion:
        -:  835:      //+1 action
    #####:  836:      state->numActions++;
        -:  837:
        -:  838:      //discard card from hand
    #####:  839:      discardCard(handPos, currentPlayer, state, 0);
        -:  840:
    #####:  841:      if (choice1) {		//+2 coins
    $$$$$:  841-block  0
branch  0 never executed
branch  1 never executed
    #####:  842:        state->coins = state->coins + 2;
    #####:  843:      }
    $$$$$:  843-block  0
unconditional  0 never executed
    #####:  844:      else if (choice2) {
    $$$$$:  844-block  0
branch  0 never executed
branch  1 never executed
        -:  845:        //discard hand, redraw 4, other players with 5+ cards discard hand and draw 4
        -:  846:
        -:  847:        //discard hand
    #####:  848:        while(numHandCards(state) > 0) {
    $$$$$:  848-block  0
unconditional  0 never executed
    $$$$$:  848-block  1
branch  1 never executed
branch  2 never executed
    $$$$$:  848-block  2
unconditional  3 never executed
    #####:  849:          discardCard(handPos, currentPlayer, state, 0);
        -:  850:        }
        -:  851:        //draw 4
    #####:  852:        for (i = 0; i < 4; i++) {
    $$$$$:  852-block  0
unconditional  0 never executed
    $$$$$:  852-block  1
branch  1 never executed
branch  2 never executed
    $$$$$:  852-block  2
unconditional  3 never executed
    #####:  853:          drawCard(currentPlayer, state);
    #####:  854:        }
    $$$$$:  854-block  0
unconditional  0 never executed
        -:  855:
        -:  856:        //other players discard hand and redraw if hand size > 4
    #####:  857:        for (i = 0; i < state->numPlayers; i++) {
    $$$$$:  857-block  0
unconditional  0 never executed
    $$$$$:  857-block  1
branch  1 never executed
branch  2 never executed
    $$$$$:  857-block  2
unconditional  3 never executed
    #####:  858:          if (i != currentPlayer) {
    $$$$$:  858-block  0
branch  0 never executed
branch  1 never executed
    #####:  859:            if ( state->handCount[i] > 4 ) {
    $$$$$:  859-block  0
branch  0 never executed
branch  1 never executed
        -:  860:              //discard hand
    #####:  861:              while( state->handCount[i] > 0 ) {
    $$$$$:  861-block  0
unconditional  0 never executed
    $$$$$:  861-block  1
branch  1 never executed
branch  2 never executed
    $$$$$:  861-block  2
unconditional  3 never executed
    #####:  862:                discardCard(handPos, i, state, 0);
        -:  863:              }
        -:  864:              //draw 4
    #####:  865:              for (j = 0; j < 4; j++)
    $$$$$:  865-block  0
unconditional  0 never executed
    $$$$$:  865-block  1
branch  1 never executed
branch  2 never executed
    $$$$$:  865-block  2
unconditional  3 never executed
        -:  866:              {
    #####:  867:                drawCard(i, state);
    #####:  868:              }
    $$$$$:  868-block  0
unconditional  0 never executed
    #####:  869:            }
    $$$$$:  869-block  0
unconditional  0 never executed
    #####:  870:          }
    $$$$$:  870-block  0
unconditional  0 never executed
    #####:  871:        }
    $$$$$:  871-block  0
unconditional  0 never executed
    #####:  872:      }
    $$$$$:  872-block  0
unconditional  0 never executed
    #####:  873:      return 0;
    $$$$$:  873-block  0
unconditional  0 never executed
        -:  874:
        -:  875:    case steward:
    #####:  876:      if (choice1 == 1) {
    $$$$$:  876-block  0
branch  0 never executed
branch  1 never executed
        -:  877:        //+2 cards
    #####:  878:	      drawCard(currentPlayer, state);
    #####:  879:	      drawCard(currentPlayer, state);
    #####:  880:	    }
    $$$$$:  880-block  0
unconditional  0 never executed
    #####:  881:      else if (choice1 == 2) {
    $$$$$:  881-block  0
branch  0 never executed
branch  1 never executed
        -:  882:    	  //+2 coins
    #####:  883:    	  state->coins = state->coins + 2;
    #####:  884:    	}
    $$$$$:  884-block  0
unconditional  0 never executed
        -:  885:      else {
        -:  886:    	  //trash 2 cards in hand
    #####:  887:    	  discardCard(choice2, currentPlayer, state, 1);
    #####:  888:    	  discardCard(choice3, currentPlayer, state, 1);
    $$$$$:  888-block  0
unconditional  0 never executed
        -:  889:    	}
        -:  890:
        -:  891:      //discard card from hand
    #####:  892:      discardCard(handPos, currentPlayer, state, 0);
    #####:  893:      return 0;
    $$$$$:  893-block  0
unconditional  0 never executed
        -:  894:
        -:  895:    case tribute:
    #####:  896:      if ((state->discardCount[nextPlayer] + state->deckCount[nextPlayer]) <= 1){
    $$$$$:  896-block  0
branch  0 never executed
branch  1 never executed
    #####:  897:        if (state->deckCount[nextPlayer] > 0) {
    $$$$$:  897-block  0
branch  0 never executed
branch  1 never executed
    #####:  898:          tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  899:          state->deckCount[nextPlayer]--;
    #####:  900:        }
    $$$$$:  900-block  0
unconditional  0 never executed
    #####:  901:      	else if (state->discardCount[nextPlayer] > 0){
    $$$$$:  901-block  0
branch  0 never executed
branch  1 never executed
    #####:  902:      	  tributeRevealedCards[0] = state->discard[nextPlayer][state->discardCount[nextPlayer]-1];
    #####:  903:      	  state->discardCount[nextPlayer]--;
    #####:  904:      	}
    $$$$$:  904-block  0
unconditional  0 never executed
        -:  905:      	else{
        -:  906:      	  //No Card to Reveal
        -:  907:      	  if (DEBUG){
        -:  908:      	    printf("No cards to reveal\n");
        -:  909:      	  }
        -:  910:      	}
    #####:  911:      }
    $$$$$:  911-block  0
unconditional  0 never executed
        -:  912:      else{
    #####:  913:        if (state->deckCount[nextPlayer] == 0){
    $$$$$:  913-block  0
branch  0 never executed
branch  1 never executed
    #####:  914:      	  for (i = 0; i < state->discardCount[nextPlayer]; i++){
    $$$$$:  914-block  0
unconditional  0 never executed
    $$$$$:  914-block  1
branch  1 never executed
branch  2 never executed
    $$$$$:  914-block  2
unconditional  3 never executed
    #####:  915:      	    state->deck[nextPlayer][i] = state->discard[nextPlayer][i];//Move to deck
    #####:  916:      	    state->deckCount[nextPlayer]++;
    #####:  917:      	    state->discard[nextPlayer][i] = -1;
    #####:  918:      	    state->discardCount[nextPlayer]--;
    #####:  919:      	  }
    $$$$$:  919-block  0
unconditional  0 never executed
    #####:  920:          shuffle(nextPlayer,state);//Shuffle the deck
    #####:  921:        }
    $$$$$:  921-block  0
unconditional  0 never executed
    #####:  922:	      tributeRevealedCards[0] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  923:	      state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  924:        state->deckCount[nextPlayer]--;
    #####:  925:        tributeRevealedCards[1] = state->deck[nextPlayer][state->deckCount[nextPlayer]-1];
    #####:  926:        state->deck[nextPlayer][state->deckCount[nextPlayer]--] = -1;
    #####:  927:        state->deckCount[nextPlayer]--;
    $$$$$:  927-block  0
unconditional  0 never executed
        -:  928:      }
        -:  929:
    #####:  930:      if (tributeRevealedCards[0] == tributeRevealedCards[1]){//If we have a duplicate card, just drop one
    $$$$$:  930-block  0
branch  0 never executed
branch  1 never executed
    #####:  931:        state->playedCards[state->playedCardCount] = tributeRevealedCards[1];
    #####:  932:        state->playedCardCount++;
    #####:  933:        tributeRevealedCards[1] = -1;
    #####:  934:      }
    $$$$$:  934-block  0
unconditional  0 never executed
    #####:  935:      for (i = 0; i <= 2; i ++){
    $$$$$:  935-block  0
unconditional  0 never executed
    $$$$$:  935-block  1
branch  1 never executed
branch  2 never executed
    $$$$$:  935-block  2
unconditional  3 never executed
    #####:  936:        if (tributeRevealedCards[i] == copper || tributeRevealedCards[i] == silver || tributeRevealedCards[i] == gold){//Treasure cards
    $$$$$:  936-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  936-block  1
branch  2 never executed
branch  3 never executed
    $$$$$:  936-block  2
branch  4 never executed
branch  5 never executed
    #####:  937:          state->coins += 2;
    #####:  938:        }
    $$$$$:  938-block  0
unconditional  0 never executed
    #####:  939:        else if (tributeRevealedCards[i] == estate || tributeRevealedCards[i] == duchy || tributeRevealedCards[i] == province || tributeRevealedCards[i] == gardens || tributeRevealedCards[i] == great_hall) {
    $$$$$:  939-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  939-block  1
branch  2 never executed
branch  3 never executed
    $$$$$:  939-block  2
branch  4 never executed
branch  5 never executed
    $$$$$:  939-block  3
branch  6 never executed
branch  7 never executed
    $$$$$:  939-block  4
branch  8 never executed
branch  9 never executed
        -:  940:          //Victory Card Found
    #####:  941:	        drawCard(currentPlayer, state);
    #####:  942:	        drawCard(currentPlayer, state);
    #####:  943:	      }
    $$$$$:  943-block  0
unconditional  0 never executed
        -:  944:        else{//Action Card
    #####:  945:          state->numActions = state->numActions + 2;
    $$$$$:  945-block  0
unconditional  0 never executed
        -:  946:        }
    #####:  947:      }
    $$$$$:  947-block  0
unconditional  0 never executed
    #####:  948:      return 0;
    $$$$$:  948-block  0
unconditional  0 never executed
        -:  949:
        -:  950:    case ambassador:
    #####:  951:      j = 0;		//used to check if player has enough cards to discard
        -:  952:
    #####:  953:      if (choice2 > 2 || choice2 < 0) {
    $$$$$:  953-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  953-block  1
branch  2 never executed
branch  3 never executed
    #####:  954:        return -1;
    $$$$$:  954-block  0
unconditional  0 never executed
        -:  955:      }
        -:  956:
    #####:  957:      if (choice1 == handPos) {
    $$$$$:  957-block  0
branch  0 never executed
branch  1 never executed
    #####:  958:        return -1;
    $$$$$:  958-block  0
unconditional  0 never executed
        -:  959:      }
        -:  960:
    #####:  961:      for (i = 0; i < state->handCount[currentPlayer]; i++) {
    $$$$$:  961-block  0
unconditional  0 never executed
    $$$$$:  961-block  1
branch  1 never executed
branch  2 never executed
    $$$$$:  961-block  2
unconditional  3 never executed
    #####:  962:        if (i != handPos && i == state->hand[currentPlayer][choice1] && i != choice1) {
    $$$$$:  962-block  0
branch  0 never executed
branch  1 never executed
    $$$$$:  962-block  1
branch  2 never executed
branch  3 never executed
    $$$$$:  962-block  2
branch  4 never executed
branch  5 never executed
    #####:  963:          j++;
    #####:  964:        }
    $$$$$:  964-block  0
unconditional  0 never executed
    #####:  965:      }
    $$$$$:  965-block  0
unconditional  0 never executed
    #####:  966:      if (j < choice2) {
    $$$$$:  966-block  0
branch  0 never executed
branch  1 never executed
    #####:  967:        return -1;
    $$$$$:  967-block  0
unconditional  0 never executed
        -:  968:      }
        -:  969:
        -:  970:      if (DEBUG) {
        -:  971:        printf("Player %d reveals card number: %d\n", currentPlayer, state->hand[currentPlayer][choice1]);
        -:  972:      }
        -:  973:
        -:  974:      //increase supply count for choosen card by amount being discarded
    #####:  975:      state->supplyCount[state->hand[currentPlayer][choice1]] += choice2;
        -:  976:
        -:  977:      //each other player gains a copy of revealed card
    #####:  978:      for (i = 0; i < state->numPlayers; i++) {
    $$$$$:  978-block  0
unconditional  0 never executed
    $$$$$:  978-block  1
branch  1 never executed
branch  2 never executed
    $$$$$:  978-block  2
unconditional  3 never executed
    #####:  979:        if (i != currentPlayer) {
    $$$$$:  979-block  0
branch  0 never executed
branch  1 never executed
    #####:  980:          gainCard(state->hand[currentPlayer][choice1], state, 0, i);
    #####:  981:        }
    $$$$$:  981-block  0
unconditional  0 never executed
    #####:  982:      }
    $$$$$:  982-block  0
unconditional  0 never executed
        -:  983:
        -:  984:      //discard played card from hand
    #####:  985:      discardCard(handPos, currentPlayer, state, 0);
        -:  986:
        -:  987:      //trash copies of cards returned to supply
    #####:  988:      for (j = 0; j < choice2; j++) {
    $$$$$:  988-block  0
unconditional  0 never executed
    $$$$$:  988-block  1
branch  1 never executed
branch  2 never executed
    $$$$$:  988-block  2
unconditional  3 never executed
    #####:  989:        for (i = 0; i < state->handCount[currentPlayer]; i++) {
    $$$$$:  989-block  0
unconditional  0 never executed
    $$$$$:  989-block  1
branch  1 never executed
branch  2 never executed
    $$$$$:  989-block  2
unconditional  3 never executed
    #####:  990:          if (state->hand[currentPlayer][i] == state->hand[currentPlayer][choice1]) {
    $$$$$:  990-block  0
branch  0 never executed
branch  1 never executed
    #####:  991:            discardCard(i, currentPlayer, state, 1);
    #####:  992:            break;
    $$$$$:  992-block  0
unconditional  0 never executed
        -:  993:          }
    #####:  994:        }
    $$$$$:  994-block  0
unconditional  0 never executed
    #####:  995:      }
    $$$$$:  995-block  0
unconditional  0 never executed
        -:  996:
    #####:  997:      return 0;
    $$$$$:  997-block  0
unconditional  0 never executed
        -:  998:
        -:  999:    case cutpurse:
    #####: 1000:      updateCoins(currentPlayer, state, 2);
    #####: 1001:      for (i = 0; i < state->numPlayers; i++) {
    $$$$$: 1001-block  0
unconditional  0 never executed
    $$$$$: 1001-block  1
branch  1 never executed
branch  2 never executed
    $$$$$: 1001-block  2
unconditional  3 never executed
    #####: 1002:	      if (i != currentPlayer) {
    $$$$$: 1002-block  0
branch  0 never executed
branch  1 never executed
    #####: 1003:          for (j = 0; j < state->handCount[i]; j++) {
    $$$$$: 1003-block  0
unconditional  0 never executed
    $$$$$: 1003-block  1
branch  1 never executed
branch  2 never executed
    $$$$$: 1003-block  2
unconditional  3 never executed
    #####: 1004:            if (state->hand[i][j] == copper) {
    $$$$$: 1004-block  0
branch  0 never executed
branch  1 never executed
    #####: 1005:              discardCard(j, i, state, 0);
    #####: 1006:              break;
    $$$$$: 1006-block  0
unconditional  0 never executed
        -: 1007:            }
    #####: 1008:            if (j == state->handCount[i]) {
    $$$$$: 1008-block  0
branch  0 never executed
branch  1 never executed
    #####: 1009:              for (k = 0; k < state->handCount[i]; k++) {
    $$$$$: 1009-block  0
unconditional  0 never executed
    $$$$$: 1009-block  1
branch  1 never executed
branch  2 never executed
    $$$$$: 1009-block  2
unconditional  3 never executed
        -: 1010:                if (DEBUG) {
        -: 1011:                  printf("Player %d reveals card number %d\n", i, state->hand[i][k]);
        -: 1012:                }
    #####: 1013:              }
    $$$$$: 1013-block  0
unconditional  0 never executed
    #####: 1014:              break;
    $$$$$: 1014-block  0
unconditional  0 never executed
        -: 1015:            }
    #####: 1016:          }
    $$$$$: 1016-block  0
unconditional  0 never executed
    #####: 1017:        }
    $$$$$: 1017-block  0
unconditional  0 never executed
    #####: 1018:      }
    $$$$$: 1018-block  0
unconditional  0 never executed
        -: 1019:
        -: 1020:      //discard played card from hand
    #####: 1021:      discardCard(handPos, currentPlayer, state, 0);
        -: 1022:
    #####: 1023:      return 0;
    $$$$$: 1023-block  0
unconditional  0 never executed
        -: 1024:
        -: 1025:    case embargo:
    #####: 1026:      playEmbargo(state, handPos, choice1);
    $$$$$: 1026-block  0
unconditional  0 never executed
        -: 1027:
        -: 1028:    case outpost:
        -: 1029:      //set outpost flag
    #####: 1030:      state->outpostPlayed++;
        -: 1031:
        -: 1032:      //discard card
    #####: 1033:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1034:      return 0;
    $$$$$: 1034-block  0
unconditional  0 never executed
        -: 1035:
        -: 1036:    case salvager:
        -: 1037:      //+1 buy
    #####: 1038:      state->numBuys++;
        -: 1039:
    #####: 1040:      if (choice1) {
    $$$$$: 1040-block  0
branch  0 never executed
branch  1 never executed
        -: 1041:        //gain coins equal to trashed card
    #####: 1042:        state->coins = state->coins + getCost( handCard(choice1, state) );
        -: 1043:        //trash card
    #####: 1044:        discardCard(choice1, currentPlayer, state, 1);
    #####: 1045:      }
    $$$$$: 1045-block  0
unconditional  0 never executed
        -: 1046:
        -: 1047:      //discard card
    #####: 1048:      discardCard(handPos, currentPlayer, state, 0);
    #####: 1049:      return 0;
    $$$$$: 1049-block  0
unconditional  0 never executed
        -: 1050:
        -: 1051:    case sea_hag:
    #####: 1052:      for (i = 0; i < state->numPlayers; i++){
    $$$$$: 1052-block  0
unconditional  0 never executed
    $$$$$: 1052-block  1
branch  1 never executed
branch  2 never executed
    $$$$$: 1052-block  2
unconditional  3 never executed
    #####: 1053:        if (i != currentPlayer){
    $$$$$: 1053-block  0
branch  0 never executed
branch  1 never executed
    #####: 1054:	        state->discard[i][state->discardCount[i]] = state->deck[i][state->deckCount[i]--];
    #####: 1055:          state->deckCount[i]--;
    #####: 1056:          state->discardCount[i]++;
    #####: 1057:          state->deck[i][state->deckCount[i]--] = curse;//Top card now a curse
    #####: 1058:        }
    $$$$$: 1058-block  0
unconditional  0 never executed
    #####: 1059:      }
    $$$$$: 1059-block  0
unconditional  0 never executed
    #####: 1060:      return 0;
    $$$$$: 1060-block  0
unconditional  0 never executed
        -: 1061:
        -: 1062:    case treasure_map:
        -: 1063:      //search hand for another treasure_map
    #####: 1064:      index = -1;
    #####: 1065:      for (i = 0; i < state->handCount[currentPlayer]; i++) {
    $$$$$: 1065-block  0
unconditional  0 never executed
    $$$$$: 1065-block  1
branch  1 never executed
branch  2 never executed
    $$$$$: 1065-block  2
unconditional  3 never executed
    #####: 1066:	      if (state->hand[currentPlayer][i] == treasure_map && i != handPos) {
    $$$$$: 1066-block  0
branch  0 never executed
branch  1 never executed
    $$$$$: 1066-block  1
branch  2 never executed
branch  3 never executed
    #####: 1067:	        index = i;
    #####: 1068:	        break;
    $$$$$: 1068-block  0
unconditional  0 never executed
        -: 1069:        }
    #####: 1070:      }
    $$$$$: 1070-block  0
unconditional  0 never executed
    #####: 1071:      if (index > -1) {
    $$$$$: 1071-block  0
branch  0 never executed
branch  1 never executed
        -: 1072:    	  //trash both treasure cards
    #####: 1073:    	  discardCard(handPos, currentPlayer, state, 1);
    #####: 1074:    	  discardCard(index, currentPlayer, state, 1);
        -: 1075:
        -: 1076:        //gain 4 Gold cards
    #####: 1077:	      for (i = 0; i < 4; i++) {
    $$$$$: 1077-block  0
unconditional  0 never executed
    $$$$$: 1077-block  1
branch  1 never executed
branch  2 never executed
    $$$$$: 1077-block  2
unconditional  3 never executed
    #####: 1078:	        gainCard(gold, state, 1, currentPlayer);
    #####: 1079:        }
    $$$$$: 1079-block  0
unconditional  0 never executed
        -: 1080:
        -: 1081:	      //return success
    #####: 1082:	      return 1;
    $$$$$: 1082-block  0
unconditional  0 never executed
        -: 1083:	    }
        -: 1084:
        -: 1085:      //no second treasure_map found in hand
    #####: 1086:      return -1;
    $$$$$: 1086-block  0
unconditional  0 never executed
        -: 1087:    }
        -: 1088:
    #####: 1089:    return -1;
    $$$$$: 1089-block  0
unconditional  0 never executed
        7: 1090:}
        7: 1090-block  0
unconditional  0 taken 7
        -: 1091:
function discardCard called 12 returned 100% blocks executed 80%
        -: 1092:int discardCard(int handPos, int currentPlayer, struct gameState *state, int trashFlag) {
        -: 1093:
        -: 1094:  //if card is not trashed, added to Played pile
       12: 1095:  if (trashFlag < 1)
       12: 1095-block  0
branch  0 taken 12
branch  1 taken 0
        -: 1096:    {
        -: 1097:      //add card to played pile
       12: 1098:      state->playedCards[state->playedCardCount] = state->hand[currentPlayer][handPos];
       12: 1099:      state->playedCardCount++;
       12: 1100:    }
       12: 1100-block  0
unconditional  0 taken 12
        -: 1101:
        -: 1102:  //set played card to -1
       12: 1103:  state->hand[currentPlayer][handPos] = -1;
        -: 1104:
        -: 1105:  //remove card from player's hand
       12: 1106:  if ( handPos == (state->handCount[currentPlayer] - 1) ) 	//last card in hand array is played
       12: 1106-block  0
branch  0 taken 0
branch  1 taken 12
        -: 1107:    {
        -: 1108:      //reduce number of cards in hand
    #####: 1109:      state->handCount[currentPlayer]--;
    #####: 1110:    }
    $$$$$: 1110-block  0
unconditional  0 never executed
       12: 1111:  else if ( state->handCount[currentPlayer] == 1 ) //only one card in hand
       12: 1111-block  0
branch  0 taken 0
branch  1 taken 12
        -: 1112:    {
        -: 1113:      //reduce number of cards in hand
    #####: 1114:      state->handCount[currentPlayer]--;
    #####: 1115:    }
    $$$$$: 1115-block  0
unconditional  0 never executed
        -: 1116:  else
        -: 1117:    {
        -: 1118:      //replace discarded card with last card in hand
       12: 1119:      state->hand[currentPlayer][handPos] = state->hand[currentPlayer][ (state->handCount[currentPlayer] - 1)];
        -: 1120:      //set last card to -1
       12: 1121:      state->hand[currentPlayer][state->handCount[currentPlayer] - 1] = -1;
        -: 1122:      //reduce number of cards in hand
       12: 1123:      state->handCount[currentPlayer]--;
       12: 1123-block  0
unconditional  0 taken 12
        -: 1124:    }
        -: 1125:
       12: 1126:  return 0;
       12: 1126-block  0
unconditional  0 taken 12
        -: 1127:}
        -: 1128:
function gainCard called 0 returned 0% blocks executed 0%
        -: 1129:int gainCard(int supplyPos, struct gameState *state, int toFlag, int player) {
        -: 1130:  //Note: supplyPos is enum of choosen card
        -: 1131:
        -: 1132:  //check if supply pile is empty (0) or card is not used in game (-1)
    #####: 1133:  if ( supplyCount(supplyPos, state) < 1 )
    $$$$$: 1133-block  0
branch  0 never executed
branch  1 never executed
        -: 1134:    {
    #####: 1135:      return -1;
    $$$$$: 1135-block  0
unconditional  0 never executed
        -: 1136:    }
        -: 1137:
        -: 1138:  //added card for [whoseTurn] current player:
        -: 1139:  // toFlag = 0 : add to discard
        -: 1140:  // toFlag = 1 : add to deck
        -: 1141:  // toFlag = 2 : add to hand
        -: 1142:
    #####: 1143:  if (toFlag == 1)
    $$$$$: 1143-block  0
branch  0 never executed
branch  1 never executed
        -: 1144:    {
    #####: 1145:      state->deck[ player ][ state->deckCount[player] ] = supplyPos;
    #####: 1146:      state->deckCount[player]++;
    #####: 1147:    }
    $$$$$: 1147-block  0
unconditional  0 never executed
    #####: 1148:  else if (toFlag == 2)
    $$$$$: 1148-block  0
branch  0 never executed
branch  1 never executed
        -: 1149:    {
    #####: 1150:      state->hand[ player ][ state->handCount[player] ] = supplyPos;
    #####: 1151:      state->handCount[player]++;
    #####: 1152:    }
    $$$$$: 1152-block  0
unconditional  0 never executed
        -: 1153:  else
        -: 1154:    {
    #####: 1155:      state->discard[player][ state->discardCount[player] ] = supplyPos;
    #####: 1156:      state->discardCount[player]++;
    $$$$$: 1156-block  0
unconditional  0 never executed
        -: 1157:    }
        -: 1158:
        -: 1159:  //decrease number in supply pile
    #####: 1160:  state->supplyCount[supplyPos]--;
        -: 1161:
    #####: 1162:  return 0;
    $$$$$: 1162-block  0
unconditional  0 never executed
    #####: 1163:}
    $$$$$: 1163-block  0
unconditional  0 never executed
        -: 1164:
function updateCoins called 0 returned 0% blocks executed 0%
        -: 1165:int updateCoins(int player, struct gameState *state, int bonus) {
        -: 1166:  int i;
        -: 1167:
        -: 1168:  //reset coin count
    #####: 1169:  state->coins = 0;
        -: 1170:
        -: 1171:  //add coins for each Treasure card in player's hand
    #####: 1172:  for (i = 0; i < state->handCount[player]; i++)
    $$$$$: 1172-block  0
unconditional  0 never executed
    $$$$$: 1172-block  1
branch  1 never executed
branch  2 never executed
    $$$$$: 1172-block  2
unconditional  3 never executed
        -: 1173:    {
    #####: 1174:      if (state->hand[player][i] == copper)
    $$$$$: 1174-block  0
branch  0 never executed
branch  1 never executed
        -: 1175:	{
    #####: 1176:	  state->coins += 1;
    #####: 1177:	}
    $$$$$: 1177-block  0
unconditional  0 never executed
    #####: 1178:      else if (state->hand[player][i] == silver)
    $$$$$: 1178-block  0
branch  0 never executed
branch  1 never executed
        -: 1179:	{
    #####: 1180:	  state->coins += 2;
    #####: 1181:	}
    $$$$$: 1181-block  0
unconditional  0 never executed
    #####: 1182:      else if (state->hand[player][i] == gold)
    $$$$$: 1182-block  0
branch  0 never executed
branch  1 never executed
        -: 1183:	{
    #####: 1184:	  state->coins += 3;
    #####: 1185:	}
    $$$$$: 1185-block  0
unconditional  0 never executed
    #####: 1186:    }
    $$$$$: 1186-block  0
unconditional  0 never executed
        -: 1187:
        -: 1188:  //add bonus
    #####: 1189:  state->coins += bonus;
        -: 1190:
    #####: 1191:  return 0;
    $$$$$: 1191-block  0
unconditional  0 never executed
        -: 1192:}
        -: 1193:
function playAdventurer called 6 returned 100% blocks executed 100%
        -: 1194:int playAdventurer(struct gameState *state) {
        6: 1195:  int currentPlayer = whoseTurn(state);
        -: 1196:
        -: 1197:
        -: 1198:  int temphand[MAX_HAND];// moved above the if statement
        6: 1199:  int drawntreasure=0;
        -: 1200:  int cardDrawn;
        6: 1201:  int z = 0;// this is the counter for the temp hand
        -: 1202:
        -: 1203:
       52: 1204:  while(drawntreasure<2) {
        6: 1204-block  0
unconditional  0 taken 6
       52: 1204-block  1
branch  1 taken 46
branch  2 taken 6
       46: 1204-block  2
unconditional  3 taken 46
       46: 1205:    if (state->deckCount[currentPlayer] <1){
       46: 1205-block  0
branch  0 taken 24
branch  1 taken 22
        -: 1206:      //if the deck is empty we need to shuffle discard and add to deck
       24: 1207:      shuffle(currentPlayer, state);
       24: 1208:    }
       24: 1208-block  0
unconditional  0 taken 24
        -: 1209:
       46: 1210:    drawCard(currentPlayer, state);
        -: 1211:    // BUG #1 Adding second call to drawCard
       46: 1212:    drawCard(currentPlayer, state);
        -: 1213:    // BUG #1 Adding second call to drawCard
        -: 1214:
        -: 1215:    //top card of hand is most recently drawn card.
       46: 1216:    cardDrawn = state->hand[currentPlayer][state->handCount[currentPlayer]-1];
        -: 1217:
        -: 1218:    // BUG #2 Mistaking gold for copper; not counting gold as a treasurecard
       46: 1219:    if (cardDrawn == copper || cardDrawn == silver || cardDrawn == copper)
       46: 1219-block  0
branch  0 taken 40
branch  1 taken 6
       40: 1219-block  1
branch  2 taken 34
branch  3 taken 6
       34: 1219-block  2
branch  4 taken 0
branch  5 taken 34
        -: 1220:    // BUG #2 Mistaking gold for copper; not counting gold as a treasurecard
        -: 1221:    // if (cardDrawn == copper || cardDrawn == silver || cardDrawn == gold)
       12: 1222:      drawntreasure++;
       12: 1222-block  0
unconditional  0 taken 12
        -: 1223:    else{
       34: 1224:      temphand[z]=cardDrawn;
       34: 1225:      state->handCount[currentPlayer]--;
        -: 1226:      //this should just remove the top card (the most recently drawn one).
       34: 1227:      z++;
       34: 1227-block  0
unconditional  0 taken 34
        -: 1228:    }
        -: 1229:  }
       40: 1230:  while(z-1>=0) {
        6: 1230-block  0
unconditional  0 taken 6
       40: 1230-block  1
branch  1 taken 34
branch  2 taken 6
       34: 1230-block  2
unconditional  3 taken 34
        -: 1231:    // discard all cards in play that have been drawn
       34: 1232:    state->discard[currentPlayer][state->discardCount[currentPlayer]++] = temphand[z-1];
       34: 1233:    z=z-1;
        -: 1234:  }
        6: 1235:  return 0;
        6: 1235-block  0
unconditional  0 taken 6
        -: 1236:}
        -: 1237:
function playSmithy called 8 returned 100% blocks executed 87%
        -: 1238:int playSmithy(struct gameState *state, int handPos) {
        -: 1239:  int i;
        8: 1240:  int currentPlayer = whoseTurn(state);
        -: 1241:
        -: 1242:  // BUG #1 The next player is incorrectly calculated with subtraction instead of addition, which will eventually cause an out of bounds error with arrays.
        -: 1243:
        8: 1244:  int nextPlayer = currentPlayer - 1;
        -: 1245:  // int nextPlayer = currentPlayer + 1;
        -: 1246:
        -: 1247:  // BUG #1 The next player is incorrectly calculated with subtraction instead of addition, which will eventually cause an out of bounds error with arrays.
        -: 1248:
        8: 1249:  if (nextPlayer > (state->numPlayers - 1)){
        8: 1249-block  0
branch  0 taken 0
branch  1 taken 8
    #####: 1250:    nextPlayer = 0;
    #####: 1251:  }
    $$$$$: 1251-block  0
unconditional  0 never executed
        -: 1252:
        -: 1253:  //+3 Cards
        -: 1254:  // BUG #2 Off by 1 error when drawing cards.
       40: 1255:  for (i = 0; i <= 3; i++) {
        8: 1255-block  0
unconditional  0 taken 8
       40: 1255-block  1
branch  1 taken 32
branch  2 taken 8
       32: 1255-block  2
unconditional  3 taken 32
        -: 1256:  // for (i = 0; i < 3; i++) {
        -: 1257:  // BUG #2
       32: 1258:    drawCard(currentPlayer, state);
       32: 1259:  }
       32: 1259-block  0
unconditional  0 taken 32
        -: 1260:
        -: 1261:  //discard card from hand
        8: 1262:  discardCard(handPos, currentPlayer, state, 0);
        8: 1263:  return 0;
        8: 1263-block  0
unconditional  0 taken 8
        -: 1264:}
        -: 1265:
function playCouncilRoom called 0 returned 0% blocks executed 0%
        -: 1266:int playCouncilRoom(struct gameState *state, int handPos) {
        -: 1267:  int i;
    #####: 1268:  int currentPlayer = whoseTurn(state);
    #####: 1269:  int nextPlayer = currentPlayer + 1;
        -: 1270:
    #####: 1271:  if (nextPlayer > (state->numPlayers - 1)){
    $$$$$: 1271-block  0
branch  0 never executed
branch  1 never executed
    #####: 1272:    nextPlayer = 0;
    #####: 1273:  }
    $$$$$: 1273-block  0
unconditional  0 never executed
        -: 1274:
        -: 1275:
        -: 1276:  //+4 Cards
    #####: 1277:  for (i = 0; i < 4; i++) {
    $$$$$: 1277-block  0
unconditional  0 never executed
    $$$$$: 1277-block  1
branch  1 never executed
branch  2 never executed
    $$$$$: 1277-block  2
unconditional  3 never executed
    #####: 1278:  	drawCard(currentPlayer, state);
    #####: 1279:  }
    $$$$$: 1279-block  0
unconditional  0 never executed
        -: 1280:
        -: 1281:  //+1 Buy
    #####: 1282:  state->numBuys++;
        -: 1283:
        -: 1284:  // BUG #1 Removes the code for each other player drawing a card
        -: 1285:  //Each other player draws a card
        -: 1286:  // for (i = 0; i < state->numPlayers; i++) {
        -: 1287:  // 	if ( i != currentPlayer ) {
        -: 1288:  // 		drawCard(i, state);
        -: 1289:  // 	}
        -: 1290:  // }
        -: 1291:  // BUG #1 Removes the code for each other player drawing a card
        -: 1292:
        -: 1293:  //put played card in played card pile
    #####: 1294:  discardCard(handPos, currentPlayer, state, 0);
        -: 1295:
    #####: 1296:  return 0;
    $$$$$: 1296-block  0
unconditional  0 never executed
        -: 1297:}
        -: 1298:
function playEmbargo called 0 returned 0% blocks executed 0%
        -: 1299:int playEmbargo(struct gameState *state, int handPos, int choice1) {
    #####: 1300:  int currentPlayer = whoseTurn(state);
    #####: 1301:  int nextPlayer = currentPlayer + 1;
        -: 1302:
    #####: 1303:  if (nextPlayer > (state->numPlayers - 1)){
    $$$$$: 1303-block  0
branch  0 never executed
branch  1 never executed
    #####: 1304:    nextPlayer = 0;
    #####: 1305:  }
    $$$$$: 1305-block  0
unconditional  0 never executed
        -: 1306:
        -: 1307:  //+2 Coins
    #####: 1308:  state->coins = state->coins + 2;
        -: 1309:
        -: 1310:  //see if selected pile is in play
        -: 1311:  // BUG #1 If statement uses an assignment (=) instead of the equality (==).
    #####: 1312:  if ( state->supplyCount[choice1] = -1 ) {
    $$$$$: 1312-block  0
branch  0 never executed
branch  1 never executed
        -: 1313:  // if ( state->supplyCount[choice1] == -1 ) {
        -: 1314:  // BUG #1
        -: 1315:
    #####: 1316:    return -1;
    $$$$$: 1316-block  0
unconditional  0 never executed
        -: 1317:  }
        -: 1318:
        -: 1319:  //add embargo token to selected supply pile
    #####: 1320:  state->embargoTokens[choice1]++;
        -: 1321:
        -: 1322:  //trash card
        -: 1323:  // BUG #2 incorrectly set the trash flag
    #####: 1324:  discardCard(handPos, currentPlayer, state, 0);
        -: 1325:  // discardCard(handPos, currentPlayer, state, 1);
        -: 1326:  // BUG #2
        -: 1327:
    #####: 1328:  return 0;
    $$$$$: 1328-block  0
unconditional  0 never executed
    #####: 1329:}
    $$$$$: 1329-block  0
unconditional  0 never executed
        -: 1330:
function playGreatHall called 0 returned 0% blocks executed 0%
        -: 1331:int playGreatHall(struct gameState *state, int handPos) {
    #####: 1332:  int currentPlayer = whoseTurn(state);
        -: 1333:
        -: 1334:  //+1 Card
    #####: 1335:  drawCard(currentPlayer, state);
        -: 1336:  //+1 Actions
    #####: 1337:  state->numActions++;
        -: 1338:  //discard card from hand
    #####: 1339:  discardCard(handPos, currentPlayer, state, 0);
    #####: 1340:  return 0;
    $$$$$: 1340-block  0
unconditional  0 never executed
        -: 1341:}
        -: 1342:
        -: 1343://end of dominion.c
